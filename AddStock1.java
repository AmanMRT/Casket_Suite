/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package micpro;

import javax.swing.table.*;
import javax.swing.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import java.awt.event.*;
import javax.swing.table.*;
import javax.swing.*;
import java.awt.event.*;
import javax.swing.table.TableCellRenderer;
import java.awt.Cursor;
import java.lang.Object;
import javax.swing.JOptionPane;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.awt.*;
import net.sourceforge.jdatepicker.*; 
import java.text.DateFormat; 
import java.util.Date;
import javax.swing.border.TitledBorder;
import javax.swing.BorderFactory;
import javax.swing.border.Border; 
import java.sql.*;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.FocusAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author ashok
 */
public class AddStock1 extends javax.swing.JFrame {
String vi;
Connection con;
String day,month,year,date;
int kk=0;
Float gstamt22=0.0f;   //choose
Float amt22=0.0f;       //choose
Float pay22;	//choose		
int row1; //**
JFrame fr,ff;
    /**
     * Creates new form AddStock1
     */
    public AddStock1(JFrame ft) {
       fr=ft;
       mno(this);
       initComponents();
        getContentPane().setBackground(new java.awt.Color(245,245,245));
    setLocation(237,24);
	setResizable(false);
	setTitle("Add Stock");
              setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("images/333.jpg")));

    }
    public void mno(JFrame fh)
    {
        ff=fh;
    }
public static void abc(String x,String y,String z)
{
  DefaultTableModel model=(DefaultTableModel)jTable1.getModel();
   model.addRow(new Object[]{x,y,z,"","",""});
 }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        jTextField10 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        mAddStockTextFieldPODate = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        mAddStockTextFieldInvoice = new javax.swing.JTextField();
        mAddStockTextFieldPONo = new javax.swing.JTextField();
        mAddStockComboBoxDay = new javax.swing.JComboBox<>();
        mAddStockComboBoxMonth = new javax.swing.JComboBox<>();
        mAddStockComboBoxYear = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        mAddStockTextFieldCompanyName = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        mAddStockComboBox = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        mAddStockTextFieldGSTNo = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        mAddStockButtonSheets = new javax.swing.JButton();
        mAddStockButtonPins = new javax.swing.JButton();
        mAddStockButtonGlue = new javax.swing.JButton();
        mAddStockButtonTapes = new javax.swing.JButton();
        mAddStockButtonColor = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        mAddStockLabelNetAmountValue = new javax.swing.JLabel();
        mAddStockLabelDeleteImage = new javax.swing.JLabel();
        mAddStockLabelTaxValue = new javax.swing.JLabel();
        mAddStockLabelSubTotalValue = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        mAddStockButtonAdd = new javax.swing.JButton();
        mAddStockButtonReset = new javax.swing.JButton();
        mAddStockButtonCancel = new javax.swing.JButton();

addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent windowEvent){
               dispose();
                         new InventoryDashboard(fr).setVisible(true);

         }        
      });      

        jPanel2.setBackground(new java.awt.Color(245, 245, 245));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Vendor Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(0, 51, 255))); // NOI18N

        jLabel4.setText("Company Name");

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jLabel9.setText("Select Using Vendor Id");

jComboBox1.addItem("Select");	

/*        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
*/



        jLabel10.setText("Enter GST No");

        jTextField10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField10)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

//        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(245, 245, 245));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Batch Property", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(0, 51, 255))); // NOI18N

        jLabel1.setText("Enter PO No (If Exist)");

        jLabel2.setText("PO Date");

        mAddStockTextFieldPODate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mAddStockTextFieldPODateActionPerformed(evt);
            }
        });

        jLabel3.setText("Delivery Date");

        jLabel7.setText("Invoice No");

        mAddStockTextFieldInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mAddStockTextFieldInvoiceActionPerformed(evt);
            }
        });

	mAddStockTextFieldInvoice.addKeyListener(new KeyAdapter()
        {
            public void keyTyped(KeyEvent e)
            {
                char c=e.getKeyChar();
                          if((c>=32 && c<=47 || c>=58 && c<=64 || c>=91 && c<=96 ||c>=123 && c<=127))
                {
                    e.consume();//ignore event
                }
                else if(mAddStockTextFieldInvoice.getText().length()>10)
                {
                   e.consume();
                }
               
            }
        });





        mAddStockTextFieldPONo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mAddStockTextFieldPONoActionPerformed(evt);
            }
        });
       mAddStockTextFieldPONo.addKeyListener(new KeyAdapter()
        {
            public void keyTyped(KeyEvent e)
            {
                char c=e.getKeyChar();
                if(((c<'0') || (c>'9')) && (c!=KeyEvent.VK_BACK_SPACE))
                {
                    e.consume();//ignore event
                }
                else if(mAddStockTextFieldPONo.getText().length()>6)
                {
                   e.consume();
                }
               
            }
        });
try{
     con = dao.createconnection();
}
catch(Exception e){}
        mAddStockTextFieldPONo.addKeyListener(new KeyAdapter()
        {
        	public void keyPressed(KeyEvent fe)
	{
	}

	public void keyReleased(KeyEvent fe)
	{
		if(!(mAddStockTextFieldPONo.getText().trim().equals("")))
                {
                    
                   
		mAddStockComboBox.setEnabled(false);

			     try
				{	
					row1=0; //**
					DefaultTableModel modelp=(DefaultTableModel)jTable1.getModel();
   					while(modelp.getRowCount() > 0)
   					{
         						mAddStockTextFieldPODate.setText("");
						mAddStockTextFieldCompanyName.setText("");	
						mAddStockTextFieldInvoice.setText("");
					
						int i;
						kk=0;
         						for(i=0;i<modelp.getRowCount();i++)
        						{ 
          							modelp.removeRow(i);
        						}
     					}
					
					PreparedStatement ps = con.prepareStatement("select * from PurchaseOrder2 where PO_NO=?");
					ps.setString(1,mAddStockTextFieldPONo.getText());
					ResultSet rs = ps.executeQuery();
					if(rs.next())
					{
					    kk=1;
					    mAddStockTextFieldPODate.setText(rs.getString(3));
					    vi=rs.getString(2);
					    PreparedStatement ps1 = con.prepareStatement("select * from details where Vendor_id=?");
					    ps1.setString(1,vi);
					    ResultSet rs1= ps1.executeQuery();
					    if(rs1.next())
					    {
					    mAddStockTextFieldCompanyName.setText(rs1.getString(1));
					    }
					   
					PreparedStatement ps5 = con.prepareStatement("select * from PurchaseOrder where PO_NO=?");
					ps5.setString(1,mAddStockTextFieldPONo.getText());
					ResultSet rs5 = ps5.executeQuery();
					
					while(rs5.next())
					{
					 String it=rs5.getString(1);
					 String desc=rs5.getString(2);
					 String qty	=rs5.getString(3);				
					 DefaultTableModel model = (DefaultTableModel)jTable1.getModel();					
					 model.addRow(new Object[]{it,desc,qty});	
					}
					




			

					}

				}
				catch(Exception e)
				{
					System.out.print(e);
				}
			 row1 = jTable1.getRowCount();    //**
		
		}
                else if(mAddStockTextFieldPONo.getText().trim().equals(""))
                {
                mAddStockComboBox.setEnabled(true);
                DefaultTableModel modelp1=(DefaultTableModel)jTable1.getModel();
   					while(modelp1.getRowCount() > 0)
   					{
         					mAddStockTextFieldPODate.setText("");
						mAddStockTextFieldCompanyName.setText("");	
						mAddStockTextFieldInvoice.setText("");
																
         						for(int i=0;i<modelp1.getRowCount();i++)
        						{ 
          							modelp1.removeRow(i);
        						}
     					}
                }
                else
                {}
        }
        
        
        
        
        });

mAddStockTextFieldCompanyName.setEditable(false);
mAddStockTextFieldPODate.setEditable(false);



        mAddStockComboBoxDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));
        mAddStockComboBoxDay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mAddStockComboBoxDayActionPerformed(evt);
            }
        });

        mAddStockComboBoxMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", " " }));
        mAddStockComboBoxMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mAddStockComboBoxMonthActionPerformed(evt);
            }
        });

        mAddStockComboBoxYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2000","2001","2002","2003","2004","2005","2006","2007","2008","2009","2010","2011","2012","2013","2014","2015","2016","2017","2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030" }));
        mAddStockComboBoxYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mAddStockComboBoxYearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mAddStockTextFieldPONo, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(43, 43, 43)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mAddStockTextFieldPODate, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(43, 43, 43)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(mAddStockTextFieldInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(mAddStockComboBoxDay, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mAddStockComboBoxMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mAddStockComboBoxYear, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(143, 143, 143))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(mAddStockTextFieldPONo)
                    .addComponent(mAddStockTextFieldPODate)
                    .addComponent(mAddStockTextFieldInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mAddStockComboBoxDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mAddStockComboBoxMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mAddStockComboBoxYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(245, 245, 245));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Vendor Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(0, 51, 255))); // NOI18N

        mAddStockTextFieldCompanyName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mAddStockTextFieldCompanyNameActionPerformed(evt);
            }
        });

        jLabel11.setText("Select Using Vendor Id");

       /* mAddStockComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mAddStockComboBoxActionPerformed(evt);
            }
        });
*/

mAddStockComboBox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent event) {
               
               mAddStockComboBox = (JComboBox) event.getSource();
              
                String selected = (String)mAddStockComboBox.getSelectedItem();
                 try
				{
					
					PreparedStatement ps2 = con.prepareStatement("select * from details where Vendor_id=?");
					ps2.setString(1,selected);
					ResultSet rs2 = ps2.executeQuery();
					if(rs2.next())
					{
						mAddStockTextFieldCompanyName.setText(rs2.getString(1));
						mAddStockTextFieldPONo.setEditable(false);
					
					}
									
				}
				catch(Exception ee)
				{
					System.out.println(ee);
				}				
             


            }
        });

			mAddStockComboBox.addItem("Select");			
			try
				{
					PreparedStatement ps3 = con.prepareStatement("select * from details ");
					ResultSet rs3 = ps3.executeQuery();
					while(rs3.next())
					{
					String id=rs3.getString(25);
					mAddStockComboBox.addItem(""+id);
					}
				
					
				}
				catch(Exception ee)
				{
				}








        jLabel12.setText("Enter GST No");

        mAddStockTextFieldGSTNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mAddStockTextFieldGSTNoActionPerformed(evt);
            }
        });

        jLabel15.setText("Company Name");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mAddStockComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(39, 39, 39)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(mAddStockTextFieldCompanyName, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(mAddStockTextFieldGSTNo, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mAddStockComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mAddStockTextFieldGSTNo)
                    .addComponent(mAddStockTextFieldCompanyName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

mAddStockTextFieldGSTNo.addKeyListener(new KeyAdapter()
        {
            public void keyTyped(KeyEvent e)
            {
                char c=e.getKeyChar();
                if((c>=32 && c<=47 || c>=58 && c<=64 || c>=91 && c<=96 ||c>=123 && c<=127))
                {
                    e.consume();//ignore event
                }
                else if(mAddStockTextFieldGSTNo.getText().length()>15)
                {
                   e.consume();
                }
               
            }
        });

 mAddStockTextFieldGSTNo.addFocusListener(new FocusAdapter()
		{
			public void focusGained(FocusEvent fe)
			{
			}
			public void focusLost(FocusEvent fe)
			{
				if(mAddStockTextFieldGSTNo.getText().trim().length()>0)
        				{
        			                   Pattern pattern = Pattern.compile("^([0][1-9]|[1-2][0-9]|[3][0-5])([a-zA-Z]{5}[0-9]{4}[a-zA-Z]{1}[1-9a-zA-Z]{1}[zZ]{1}[0-9a-zA-Z]{1})+$", Pattern.CASE_INSENSITIVE);
           				Matcher m=pattern.matcher(mAddStockTextFieldGSTNo.getText());
           				Boolean b=m.matches();
           				if(b!=true)
           				{
           				    JOptionPane.showMessageDialog(new JFrame(),"Invalid GST No");
           				}
      			}
		}	
		});







        jPanel4.setBackground(new java.awt.Color(245, 245, 245));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Add Item", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(0, 51, 255))); // NOI18N
        jPanel4.setForeground(new java.awt.Color(0, 51, 255));

mAddStockButtonGlue.setBackground(new java.awt.Color(241, 239, 241));
mAddStockButtonColor.setBackground(new java.awt.Color(241, 239, 241));
mAddStockButtonPins.setBackground(new java.awt.Color(241, 239, 241));
mAddStockButtonSheets.setBackground(new java.awt.Color(241, 239, 241));
mAddStockButtonTapes.setBackground(new java.awt.Color(241, 239, 241));



        mAddStockButtonSheets.setIcon(new javax.swing.ImageIcon(getClass().getResource("images/f.png"))); // NOI18N
        mAddStockButtonSheets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mAddStockButtonSheetsActionPerformed(evt);
            }
        });

       mAddStockButtonSheets.setBorderPainted(false);
      mAddStockButtonSheets.setToolTipText("Sheets");
	mAddStockButtonSheets.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        mAddStockButtonSheets.addMouseListener(new MouseAdapter()
		{
			public void mouseEntered(MouseEvent me)
			{
			mAddStockButtonSheets.setBackground(new Color(160,160,160)); 
			}
			public void mouseExited(MouseEvent me)
			{
				mAddStockButtonSheets.setBackground(new Color(241,239,241));
			}
			public void mouseClicked(MouseEvent me)
			{
				
			}
		});           




        mAddStockButtonPins.setIcon(new javax.swing.ImageIcon(getClass().getResource("images/b.png"))); // NOI18N
        mAddStockButtonPins.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mAddStockButtonPinsActionPerformed(evt);
            }
        });

mAddStockButtonPins.setBorderPainted(false);
      mAddStockButtonPins.setToolTipText("Pins");
	mAddStockButtonPins.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        mAddStockButtonPins.addMouseListener(new MouseAdapter()
		{
			public void mouseEntered(MouseEvent me)
			{
			mAddStockButtonPins.setBackground(new Color(160,160,160)); 
			}
			public void mouseExited(MouseEvent me)
			{
				mAddStockButtonPins.setBackground(new Color(241,239,241));
			}
			public void mouseClicked(MouseEvent me)
			{
				
			}
		});           




        mAddStockButtonGlue.setIcon(new javax.swing.ImageIcon(getClass().getResource("images/d.png"))); // NOI18N
        mAddStockButtonGlue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mAddStockButtonGlueActionPerformed(evt);
            }
        });

mAddStockButtonGlue.setBorderPainted(false);
      mAddStockButtonGlue.setToolTipText("Glue");
	mAddStockButtonGlue.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        mAddStockButtonGlue.addMouseListener(new MouseAdapter()
		{
			public void mouseEntered(MouseEvent me)
			{
			mAddStockButtonGlue.setBackground(new Color(160,160,160)); 
			}
			public void mouseExited(MouseEvent me)
			{
				mAddStockButtonGlue.setBackground(new Color(241,239,241));
			}
			public void mouseClicked(MouseEvent me)
			{
				
			}
		});           


        mAddStockButtonTapes.setIcon(new javax.swing.ImageIcon(getClass().getResource("images/c.png"))); // NOI18N
        mAddStockButtonTapes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mAddStockButtonTapesActionPerformed(evt);
            }
        });
mAddStockButtonTapes.setBorderPainted(false);
      mAddStockButtonTapes.setToolTipText("Tapes");
	mAddStockButtonTapes.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        mAddStockButtonTapes.addMouseListener(new MouseAdapter()
		{
			public void mouseEntered(MouseEvent me)
			{
			mAddStockButtonTapes.setBackground(new Color(160,160,160)); 
			}
			public void mouseExited(MouseEvent me)
			{
				mAddStockButtonTapes.setBackground(new Color(241,239,241));
			}
			public void mouseClicked(MouseEvent me)
			{
				
			}
		});           


        mAddStockButtonColor.setIcon(new javax.swing.ImageIcon(getClass().getResource("images/e.png"))); // NOI18N
        mAddStockButtonColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mAddStockButtonColorActionPerformed(evt);
            }
        });

mAddStockButtonColor.setBorderPainted(false);
      mAddStockButtonColor.setToolTipText("Dye");
	mAddStockButtonColor.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        mAddStockButtonColor.addMouseListener(new MouseAdapter()
		{
			public void mouseEntered(MouseEvent me)
			{
			mAddStockButtonColor.setBackground(new Color(160,160,160)); 
			}
			public void mouseExited(MouseEvent me)
			{
				mAddStockButtonColor.setBackground(new Color(241,239,241));
			}
			public void mouseClicked(MouseEvent me)
			{
				
			}
		});           



        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addComponent(mAddStockButtonSheets, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addComponent(mAddStockButtonPins, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addComponent(mAddStockButtonGlue, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addComponent(mAddStockButtonTapes, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addComponent(mAddStockButtonColor, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mAddStockButtonColor, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mAddStockButtonTapes, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mAddStockButtonGlue, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mAddStockButtonPins, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mAddStockButtonSheets, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(245, 245, 245));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Selected items", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(0, 51, 255))); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Description", "Qty", "Unit Price", "GST(%)", "Amount(Rs)"
            }
        ));
        TableCellRenderer rendererFromHeader = jTable1.getTableHeader().getDefaultRenderer();
        JLabel headerLabel = (JLabel) rendererFromHeader;
        headerLabel.setHorizontalAlignment(JLabel.CENTER);
        jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        jTable1.getColumnModel().getColumn(0).setPreferredWidth(70);
        jTable1.getColumnModel().getColumn(1).setPreferredWidth(359);
        jTable1.getColumnModel().getColumn(2).setPreferredWidth(60);
        jTable1.getColumnModel().getColumn(3).setPreferredWidth(80);
        jTable1.getColumnModel().getColumn(4).setPreferredWidth(95);
        jTable1.getColumnModel().getColumn(5).setPreferredWidth(129);
        jScrollPane1.setViewportView(jTable1);





        jTable1.addKeyListener(new KeyAdapter()
	{         
                  	           /*        public void keyTyped(KeyEvent e)
            		{
         	      		char c = e.getKeyChar();
            			if (!((c >= '0') && (c <= '9') || (c == KeyEvent.VK_BACK_SPACE) || (c == KeyEvent.VK_DELETE) || (c == KeyEvent.VK_ENTER) || (c == KeyEvent.VK_TAB))) 	
			{
                			getToolkit().beep();
                			e.consume();
           			}
		}
*/
	          public void keyReleased(KeyEvent e)
	          {
                              row1 = jTable1.getRowCount();  
/*     		DefaultTableModel model4=(DefaultTableModel)jTable1.getModel();
		int selectedColumn = jTable1.getSelectedColumn();
		int selectedRow = jTable1.getSelectedRow();
		if(selectedColumn==4)
		{
		
			
			
				Object obj =jTable1.getModel().getValueAt(selectedRow,2);	 
				String str=String.valueOf(obj);
				String[] splitStr = str.split("\\s+");   	
				int quant=Integer.parseInt(splitStr[0]);
				
				Object up =jTable1.getModel().getValueAt(selectedRow,3);
				Object gs=jTable1.getModel().getValueAt(selectedRow,4);		
				String str2=String.valueOf(up);
				Float unitprice=Float.parseFloat(str2);
				
				String str3=String.valueOf(gs);
				Float gst=Float.parseFloat(str3);
					
		
				Float amt=quant*unitprice;				
				String str4 = Float.toString(amt);
				jTable1.setValueAt((Object)str4,selectedRow,5);
				
				amt22=amt22+amt;
				String str6 = Float.toString(amt22);

				
				
				gstamt22= gstamt22+((gst*amt)/100);
				String str5 = Float.toString(gstamt22);
									
					
					pay22=amt22+gstamt22;
					mAddStockLabelSubTotalValue.setText(""+str6);
					mAddStockLabelTaxValue.setText(""+str5);
					jLabel16.setText(""+pay22);
		
				}				


*/

		DefaultTableModel model4=(DefaultTableModel)jTable1.getModel();
		int selectedColumn = jTable1.getSelectedColumn();
		int m;
		if(selectedColumn==4)
		{
		
			Float gstamt=0.0f;
			Float amt2=0.0f;
			for(m=0;m<row1;m++)
			{
				Object obj =jTable1.getModel().getValueAt(m,2);	 
				String str=String.valueOf(obj);
				String[] splitStr = str.split("\\s+");   	
				int quant=Integer.parseInt(splitStr[0]);
				
				Object up =jTable1.getModel().getValueAt(m,3);
				Object gs=jTable1.getModel().getValueAt(m,4);		
				String str2=String.valueOf(up);
				Float unitprice=Float.parseFloat(str2);
				
				String str3=String.valueOf(gs);
				Float gst=Float.parseFloat(str3);
					
		
				Float amt=quant*unitprice;				
				String str4 = Float.toString(amt);
				jTable1.setValueAt((Object)str4,m,5);
				
				amt2=amt2+amt;
				String str6 = Float.toString(amt2);

				
				
				gstamt= gstamt+((gst*amt)/100);
				String str5 = Float.toString(gstamt);
									
				if(m==(row1-1))
				{
					Float pay;
					pay=amt2+gstamt;
					mAddStockLabelSubTotalValue.setText(""+str6);
					mAddStockLabelTaxValue.setText(""+str5);
					jLabel16.setText(""+pay);
		
				}				

			}
		}
		
	         }
	});









        jLabel13.setText("Sub Amount :");

        jLabel14.setText("Tax:");

        mAddStockLabelNetAmountValue.setText("Net  Amount :");

        mAddStockLabelDeleteImage.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        mAddStockLabelDeleteImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("images/del.png"))); // NOI18N
       mAddStockLabelDeleteImage.setToolTipText("Delete Selected Item");
	 mAddStockLabelDeleteImage.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        mAddStockLabelDeleteImage.addMouseListener(new MouseAdapter()
		{
			
			public void mouseClicked(MouseEvent me)
			{
				
				int a=JOptionPane.showConfirmDialog(new JFrame(),"Are you sure?");  
				if(a==JOptionPane.YES_OPTION)
				{  
                                    try{
				DefaultTableModel models = (DefaultTableModel)jTable1.getModel();
  				 int[] rows = jTable1.getSelectedRows();
				 for(int i=0;i<rows.length;i++)
				{
				row1--; //**
  				 models.removeRow(rows[i]-i);
				if(kk==1)
				{
				        String descrip=(String)jTable1.getModel().getValueAt((rows[i]-i),1);
					Connection con2 = dao.createconnection();
					PreparedStatement ps6= con.prepareStatement("delete from PurchaseOrder where Description=? and PO_NO=?");
					ps6.setString(1,descrip);
					ps6.setString(2,mAddStockTextFieldPONo.getText());
					int zz=ps6.executeUpdate();	
					    
				}
			



 				 }
                                    }
                                    catch(Exception e){ 
                                    }
			}

			}
		});           








        mAddStockLabelTaxValue.setText("");

        mAddStockLabelSubTotalValue.setText("");

        jLabel16.setText("");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(mAddStockLabelTaxValue, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(mAddStockLabelSubTotalValue, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(697, 697, 697)
                        .addComponent(mAddStockLabelNetAmountValue)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)))
                .addGap(22, 22, 22))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 799, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                        .addGap(790, 790, 790)
                        .addComponent(mAddStockLabelDeleteImage, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addComponent(mAddStockLabelDeleteImage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(mAddStockLabelTaxValue)
                    .addComponent(mAddStockLabelSubTotalValue))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mAddStockLabelNetAmountValue)
                    .addComponent(jLabel16))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mAddStockButtonAdd.setText("Add To Stock");
        mAddStockButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mAddStockButtonAddActionPerformed(evt);
            }
        });
 mAddStockButtonAdd.setToolTipText("Add Item To Stock");
	  mAddStockButtonAdd.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

        mAddStockButtonReset.setText("Reset");
        mAddStockButtonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mAddStockButtonResetActionPerformed(evt);
            }
        });

mAddStockButtonReset.setToolTipText("Reset");
	  mAddStockButtonReset.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

        mAddStockButtonCancel.setText("Cancel");
        mAddStockButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mAddStockButtonCancelActionPerformed(evt);
            }
        });
mAddStockButtonCancel.setToolTipText("Cancel");
	  mAddStockButtonCancel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(mAddStockButtonAdd)
                        .addGap(18, 18, 18)
                        .addComponent(mAddStockButtonReset, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(mAddStockButtonCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mAddStockButtonAdd)
                    .addComponent(mAddStockButtonReset)
                    .addComponent(mAddStockButtonCancel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void mAddStockTextFieldPODateActionPerformed(java.awt.event.ActionEvent evt) {                                                         
        // TODO add your handling code here:
    }                                                        

    private void mAddStockTextFieldInvoiceActionPerformed(java.awt.event.ActionEvent evt) {                                                          
        // TODO add your handling code here:
    }                                                         

    private void mAddStockTextFieldPONoActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        // TODO add your handling code here:
    }                                                      

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void jTextField10ActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
    }                                            

    private void mAddStockTextFieldCompanyNameActionPerformed(java.awt.event.ActionEvent evt) {                                                              
        // TODO add your handling code here:
    }                                                             

    private void mAddStockComboBoxActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        // TODO add your handling code here:
    }                                                 

    private void mAddStockTextFieldGSTNoActionPerformed(java.awt.event.ActionEvent evt) {                                                        
        // TODO add your handling code here:
    }                                                       

    private void mAddStockButtonSheetsActionPerformed(java.awt.event.ActionEvent evt) {                                                      
              new Sheets(2,ff).setVisible(true);// TODO add your handling code here:
ff.setEnabled(false);// TODO add your handling code here:
    }                                                     

    private void mAddStockButtonAddActionPerformed(java.awt.event.ActionEvent evt) {                                                   

	DefaultTableModel model9=(DefaultTableModel)jTable1.getModel();
	int xx=model9.getRowCount();      
	day=(String)mAddStockComboBoxDay.getSelectedItem();
	month=(String)mAddStockComboBoxMonth.getSelectedItem();
	year=(String)mAddStockComboBoxYear.getSelectedItem();
	date=day+"-"+month+"-"+year;
					
	 
	if(mAddStockTextFieldCompanyName.getText().equals(""))
	    {
				JOptionPane.showMessageDialog(new javax.swing.JFrame(),"Please Select Vendor or Enter PO No(if exist)");
	    }
	else if(mAddStockTextFieldInvoice.getText().equals(""))
	{
	JOptionPane.showMessageDialog(new javax.swing.JFrame(),"Please Enter Invoice No");
	}
	/*else if(date.equals("01-Jan-2000"))
	{
	JOptionPane.showMessageDialog(new javax.swing.JFrame(),"Please Select Delivery Date");
	}*/
	else if(mAddStockTextFieldGSTNo.getText().equals(""))
	{
	JOptionPane.showMessageDialog(new javax.swing.JFrame(),"Please Enter GST No");
	}
	else if(mAddStockTextFieldGSTNo.getText().trim().length()<15)
	{
	JOptionPane.showMessageDialog(new javax.swing.JFrame(),"Invalid GST No");
	}
	
	else if(xx==0)
	{
			JOptionPane.showMessageDialog(new javax.swing.JFrame(),"Please add item");
	}

	else
	{

			if(mAddStockTextFieldPODate.getText().equals(""))
			{
				try
				{
					//Connection con = dao.createconnection();
					PreparedStatement pss = con.prepareStatement("insert into PurchaseOrder values(?,?,?,?,?,?,?,?)");
					
					DefaultTableModel model4=(DefaultTableModel)jTable1.getModel();
					int x=model4.getRowCount();	
					int j;
					for(j=0;j<x;j++)
					{
					String item =model4.getValueAt(j, 0).toString();
    					String desc=model4.getValueAt(j, 1).toString();
    					String quant=model4.getValueAt(j,2 ).toString();					
					String ppu=model4.getValueAt(j,3).toString();
					String gst=model4.getValueAt(j,4 ).toString();
					String tot=model4.getValueAt(j,5 ).toString();
		
		
					pss.setString(1,item);
					pss.setString(2,desc);
					pss.setString(3,quant);
					pss.setString(4,ppu);
					pss.setString(5,tot);
					pss.setString(6,"");
					pss.setString(7,gst);
					pss.setString(8,mAddStockTextFieldInvoice.getText());
					int  zz = pss.executeUpdate();
						if(zz>0)      
						{
						}
					}
					PreparedStatement pss1 = con.prepareStatement("insert into PurchaseOrder2 values(?,?,?,?,?,?,?,?,?)");
					pss1.setString(1,"");
					pss1.setString(2, (String)mAddStockComboBox.getSelectedItem());
					pss1.setString(3,"");
					
					
					pss1.setString(4,date); 
					pss1.setString(5,jLabel16.getText());
					pss1.setString(6,mAddStockTextFieldGSTNo.getText());
					pss1.setString(7,mAddStockTextFieldInvoice.getText());
					pss1.setString(8,mAddStockLabelTaxValue.getText());
					pss1.setString(9,mAddStockLabelSubTotalValue.getText());
					int  zz1 = pss1.executeUpdate();			
						if(zz1>0)      
						{
							  

	       DefaultTableModel models=(DefaultTableModel)jTable1.getModel();
                            for(int i=0;i< models.getRowCount();i++)
                            {       
                                    String item_type=models.getValueAt(i,0).toString();
                                    String desc=models.getValueAt(i,1).toString();
                                    String qty=models.getValueAt(i,2).toString();
                            
                                    if(item_type.equals("Pins"))  //pins adition in database
                                    {
                                        String[] tokens_desc =desc.split(", ");
                                        String gau[] =tokens_desc[4].split(" ");

                                        String[] size_input= tokens_desc[0].split(" ");  //size conversion in cm
                                        float size=Float.parseFloat(size_input[0]);  
                                        if(size_input[1].equals("mm"))
                                        { 
                                          size*=.10;    //send this size in db for "size"
                                        }
                                        else if(size_input[1].equals("inch"))
                                        { 
                                          size*=2.54;  //send this size in db for "size"
                                        }
                                        else{}
		
                                        String[] qty_input= qty.split(" ");    //qty conversion
                                        float qty_conv=Float.parseFloat(qty_input[0]);
                                        //considered in "units"; 1 box=250 packets and 1 packet=20 units; 
                                        if(qty_input[1].equalsIgnoreCase("box"))
                                        { 
                                         qty_conv*=250*20;   //send this qty in db for "qty"
                                        }
                                        else if(qty_input[1].equalsIgnoreCase("packet"))
                                        { 
                                          qty_conv*=20;     //send this qty in db for "qty"
                                        }
                                        else{}
		
		try{

		    // Connection con2 = dao.createconnection();
                                          PreparedStatement ps = con.prepareStatement("select * from pins where Material=? and Size=? and Crown=? and Color=? and Gauge=? and Brand=?");
		     ps.setString(1,tokens_desc[1]);		
		     String size1=Float.toString(size);
		     ps.setString(2,size1);		
		     ps.setString(3,tokens_desc[3]);		
		     ps.setString(4,tokens_desc[5]);		
		     ps.setString(5,gau[0]);		
		     ps.setString(6,tokens_desc[6]);		
		     ResultSet rs =ps.executeQuery();
		     if(rs.next())
		    {
			
			
			float qt=rs.getFloat(8);
		 	float netqty= qty_conv+qt;

			PreparedStatement ps1 = con.prepareStatement("update pins set Qty_Left=?  where Material=? and Size=? and Crown=? and Color=? and Gauge=? and Brand=?");
		     	ps1.setFloat(1,netqty);		
		     	ps1.setString(2,tokens_desc[1]);		
		     	ps1.setString(3,size1);		
		     	ps1.setString(4,tokens_desc[3]);		
		     	ps1.setString(5,tokens_desc[5]);		
		     	ps1.setString(6,gau[0]);		
		     	ps1.setString(7,tokens_desc[6]);		
			int z1=ps1.executeUpdate();		     	

		    }
		    else
		    {
			
			
			PreparedStatement ps2 = con.prepareStatement("insert into pins values(?,?,?,?,?,?,?,?)");
		     	ps2.setString(1,tokens_desc[1]);		
		     	ps2.setString(2,size1);		
		     	ps2.setString(3,tokens_desc[3]);		
		     	ps2.setString(4,tokens_desc[5]);		
		     	ps2.setString(5,gau[0]);		
		     	ps2.setString(6,tokens_desc[6]);		
			ps2.setFloat(7,0.f);		
			ps2.setFloat(8,qty_conv);		
			int z2=ps2.executeUpdate();		     	
			


												
		    }

}


		    catch(Exception e)
		     {
			System.out.print(e);			
		      }                                        

                                        
                                    }
                                    
                                    else if(item_type.equals("Glue"))
                                    {

		   String[] tokens_desc =desc.split(", ");
                                       
                                        String[] qty_input= qty.split(" ");    //qty conversion
                                        float qty_conv=Float.parseFloat(qty_input[0]);
                                        //considered in litre; 1kg= 1litre, 1ml=1/1000 litre, 1gm=1/1000 litre 
                                        if(qty_input[1].equals("ml") || qty_input[1].equals("gm"))
                                        { 
                                         qty_conv*=0.001;   //send this qty in db for "qty"
                                        }
                                       
                                        
		try{

//		     Connection con3 = dao.createconnection();
                                          PreparedStatement ps = con.prepareStatement("select * from glue where Viscosity=? and Gel_Time=? and Moisture_Content=? and Color=?");
		     String vs[]=tokens_desc[0].split(" ");
		     String mc[]=tokens_desc[4].split("%");
		     String gt[]=tokens_desc[1].split(" ");
		     ps.setString(1,vs[0]);		
		     ps.setString(2,gt[0]);		
		     ps.setString(3,mc[0]);		
		     ps.setString(4,tokens_desc[2]);		
		     ResultSet rs =ps.executeQuery();
		    if(rs.next())
		    {
			
			
			float qt=rs.getFloat(6);
		 	float netqty= qty_conv+qt;

			PreparedStatement ps1 = con.prepareStatement("update glue set Qty_Left=?  where Viscosity=? and Gel_Time=? and Moisture_Content=? and Color=?");
		     	ps1.setFloat(1,netqty);		
		     	ps1.setString(2,vs[0]);		
		     	ps1.setString(3,gt[0]);		
		     	ps1.setString(4,mc[0]);		
		     	ps1.setString(5,tokens_desc[2]);		
		 	int z1=ps1.executeUpdate();		     	

		    }
		    else
		    {
			
			
			PreparedStatement ps2 = con.prepareStatement("insert into glue values(?,?,?,?,?,?)");
		     	ps2.setString(1,vs[0]);		
		     	ps2.setString(2,gt[0]);		
		     	ps2.setString(3,mc[0]);		
		     	ps2.setString(4,tokens_desc[2]);		
			ps2.setFloat(5,0.f);		
			ps2.setFloat(6,qty_conv);		
			int z2=ps2.executeUpdate();		     	
			


												
		    }

}


		    catch(Exception e)
		     {
			System.out.print(e);			
		      }                                        
                                    
                                    
                                    }
                                    
                                    else if(item_type.equals("Dye"))
                                    {
                                        String[] tokens_desc =desc.split(", ");
                                    
                                        String[] drying_speed_input=tokens_desc[1].split(" ");
                                        float drying_speed=Float.parseFloat(drying_speed_input[0]);
                                        //considered in min.;
                                        if(drying_speed_input[1].equals("Hr"))
                                        { 
                                            drying_speed*=60;    //send this speed as "drying speed " in the db table
                                        }
                                        else if(drying_speed_input[1].equals("Sec"))
                                        { 
                                            drying_speed*=1/60;    //send this speed as "drying speed " in the db table
                                        }
                                        else{}

                                        String[] qty_input= qty.split(" ");    //qty conversion
                                        float qty_conv=Float.parseFloat(qty_input[0]);
                                        //considered in bottle 1 unit=2 bottles, 1 bottle=1litre or 1 kg;
                                        if(qty_input[1].equals("Unit"))
                                        { 
                                         qty_conv*=2;   //send this qty in db for "qty"
                                        }

					try{

		    // Connection con1 = dao.createconnection();
                                          PreparedStatement ps = con.prepareStatement("select * from dye where Type=? and Drying_Speed=? and GCMI_Code=? and Color=? and Brand=?");
		     ps.setString(1,tokens_desc[0]);		
		     String ds=Float.toString(drying_speed);
		     ps.setString(2,ds);		
		     ps.setString(3,tokens_desc[2]);		
		     ps.setString(4,tokens_desc[3]);		
		     ps.setString(5,tokens_desc[4]);		
		     ResultSet rs =ps.executeQuery();
		     if(rs.next())
		    {
			
			
			float qt=rs.getFloat(7);
		 	float netqty= qty_conv+qt;

			PreparedStatement ps1 = con.prepareStatement("update dye set Qty_Left=?  where Type=? and Drying_Speed=? and GCMI_Code=? and Color=? and Brand=?");
		     	ps1.setFloat(1,netqty);		
		     	ps1.setString(2,tokens_desc[0]);		
		     	ps1.setString(3,ds);		
		     	ps1.setString(4,tokens_desc[2]);		
		     	ps1.setString(5,tokens_desc[3]);		
		     	ps1.setString(6,tokens_desc[4]);		
			int z1=ps1.executeUpdate();		     	

		    }
		    else
		    {
			
			
			PreparedStatement ps2 = con.prepareStatement("insert into dye values(?,?,?,?,?,?,?)");
		     	ps2.setString(1,tokens_desc[0]);		
		     	ps2.setString(2,ds);		
		     	ps2.setString(3,tokens_desc[2]);		
		     	ps2.setString(4,tokens_desc[3]);		
		     	ps2.setString(5,tokens_desc[4]);		
			ps2.setFloat(6,0.f);		
			ps2.setFloat(7,qty_conv);		
			int z2=ps2.executeUpdate();		     	
			


												
		    }

}
		     catch(Exception e){}             
                                    

}

                                    else if(item_type.equals("Tapes"))
                                    {
                                        String[] tokens_desc =desc.split(", ");
                                    
                                        String[] thickness_input=tokens_desc[2].split(" ");
                                        float thickness=Float.parseFloat(thickness_input[0]);
                                        //considered in cm; mm,cm,inch
                                        if(thickness_input[1].equals("mm"))
                                        { 
                                            thickness*=0.10;    //send this thickness as "thickness" in the db table
                                        }
                                        else if(thickness_input[1].equals("inch"))
                                        { 
                                            thickness*=2.56;    //send this thickness as "thickness" in the db table
                                        }
		else{}
                                        
                                        String[] length_input=tokens_desc[3].split(" ");
                                        float length=Integer.parseInt(length_input[0]);
                                        //considered in cm; m,cm,inch
                                        if(length_input[1].equals("m"))
                                        { 
                                            length*=100;    //send this length as "length" in the db table
                                        }
                                        else if(length_input[1].equals("inch"))
                                        { 
                                            length*=2.56;    //send this length as "length" in the db table
                                        }
                                        else{}

                                        String[] qty_input= qty.split(" ");    //qty conversion
                                        float qty_conv=Integer.parseInt(qty_input[0]);
                                        //considered in unit; 1 kg=25 units, 1 box=2 kg;
                                        if(qty_input[1].equals("kg"))
                                        { 
                                         qty_conv*=25;   //send this qty in db for "qty"
                                        }
                                        else if(qty_input[1].equals("Box"))
                                        { 
                                         qty_conv*=2*25;   //send this qty in db for "qty"
                                        }
                                        
                                     try{

		    // Connection con2 = dao.createconnection();
                                          PreparedStatement ps = con.prepareStatement("select * from tapes where Backing_Material=? and Type=? and Total_Thickness=? and Length=? and Color=?");
		     ps.setString(1,tokens_desc[0]);		
		     ps.setString(2,tokens_desc[1]);
		     String th=Float.toString(thickness);		
		     String le=Float.toString(length);		
		     ps.setString(3,th);		
		     ps.setString(4,le);		
		     ps.setString(5,tokens_desc[4]);		
		     ResultSet rs =ps.executeQuery();
		     if(rs.next())
		    {
			
			
			float qt=rs.getFloat(7);
		 	float netqty= qty_conv+qt;

			PreparedStatement ps1 = con.prepareStatement("update tapes set Qty_Left=?  where Backing_Material=? and Type=? and Total_Thickness=? and Length=? and Color=?");
		     	ps1.setFloat(1,netqty);		
		     	ps1.setString(2,tokens_desc[0]);		
		     	ps1.setString(3,tokens_desc[1]);		
		     	ps1.setString(4,th);		
		     	ps1.setString(5,le);		
		     	ps1.setString(6,tokens_desc[4]);		
		     	int z1=ps1.executeUpdate();		     	

		    }
		    else
		    {
			
			
			PreparedStatement ps2 = con.prepareStatement("insert into tapes values(?,?,?,?,?,?,?)");
		     	ps2.setString(1,tokens_desc[0]);		
		     	ps2.setString(2,tokens_desc[1]);		
		     	ps2.setString(3,th);		
		     	ps2.setString(4,le);		
		     	ps2.setString(5,tokens_desc[4]);		
			ps2.setFloat(6,0.f);		
			ps2.setFloat(7,qty_conv);		
			int z2=ps2.executeUpdate();		     	
			


												
		    }

}


		    catch(Exception e)
		     {
			System.out.print(e);			
		      }                                        


                                    }
		
		


	                   else if(item_type.equals("Sheet"))
                                    {
                                        String[] tokens_desc =desc.split(", ");
                                    
                                        String[] thickness_input=tokens_desc[0].split(" ");
                                        float thickness=Float.parseFloat(thickness_input[0]);
                                        //considered in cm; mm,cm,inch
                                        if(thickness_input[1].equals("mm"))
                                        { 
                                            thickness*=0.10;    //send this thickness as "thickness" in the db table
                                        }
                                        else if(thickness_input[1].equals("inch"))
                                        { 
                                            thickness*=2.56;    //send this thickness as "thickness" in the db table
                                        }
                                        else{}


                                        String[] width_input=tokens_desc[4].split(" ");
                                        float width=Float.parseFloat(width_input[0]);
                                        //considered in cm; mm,m,cm,inch
                                        if(width_input[1].equals("m"))
                                        { 
                                            width*=100;    //send this width as "width" in the db table
                                        }
                                        else if(width_input[1].equals("inch"))
                                        { 
                                            width*=2.56;    //send this width as "width" in the db table
                                        }
                                        else if(width_input[1].equals("mm"))
                                        { 
                                            width*=0.10;    //send this width as "width" in the db table
                                        }
                                        else{}

                                        String[] qty_input= qty.split(" ");    //qty conversion
                                        float qty_conv=Float.parseFloat(qty_input[0]);
                                        //considered in kg; 1 roll=5kg; m in kg nahi mila; 1 ton = 1000 kg(approx)
                                        if(qty_input[1].equals("Roll"))
                                        { 
                                         qty_conv*=5;   //send this qty in db for "qty"
                                        }
                                       
                                        else if(qty_input[1].equals("Ton"))
                                        { 
                                         qty_conv*=1000;   //send this qty in db for "qty"
                                        }
                                       else if(qty_input[1].equals("Meter"))
                                        { 
                                         qty_conv*=10;   // thik
                                        }
		else{}
	
		 try{

		   //  Connection con2 = dao.createconnection();
                                          PreparedStatement ps = con.prepareStatement("select * from sheets where Type=? and Width=? and Thickness=? and Color=? and Paper_Weight=?");
		     ps.setString(1,tokens_desc[1]);		
		     String wi=Float.toString(width);
		     String thic=Float.toString(thickness);
		     ps.setString(2,wi);		
		     ps.setString(3,thic);		
		     ps.setString(4,tokens_desc[3]);		
		     String pw[]=tokens_desc[2].split("gsm");
		     ps.setString(5,pw[0]);		
		     ResultSet rs =ps.executeQuery();
		     if(rs.next())
		    {
			
			
			float qt=rs.getFloat(7);
		 	float netqty= qty_conv+qt;

			PreparedStatement ps1 = con.prepareStatement("update sheets set Qty_Left=?  where Type=? and Width=? and Thickness=? and Color=? and Paper_Weight=?");
		     	ps1.setFloat(1,netqty);		
		     	ps1.setString(2,tokens_desc[1]);		
		     	ps1.setString(3,wi);		
		     	ps1.setString(4,thic);		
		     	ps1.setString(5,tokens_desc[3]);		
		     	ps1.setString(6,pw[0]);		
		     	int z1=ps1.executeUpdate();		     	

		    }
		    else
		    {
			
			
			PreparedStatement ps2 = con.prepareStatement("insert into sheets values(?,?,?,?,?,?,?)");
		     	ps2.setString(1,tokens_desc[1]);		
		     	ps2.setString(2,wi);		
		     	ps2.setString(3,thic);		
		     	ps2.setString(4,tokens_desc[3]);		
		     	ps2.setString(5,pw[0]);		
			ps2.setFloat(6,0.f);		
			ps2.setFloat(7, qty_conv);		
			int z2=ps2.executeUpdate();		     	
			


												
		    }

}


		    catch(Exception e)
		     {
			System.out.print(e);			
		      }                                        


                                        
		}
                                    
}

	











							JOptionPane.showMessageDialog(new JFrame(),"Stock Added successfully");						
							   DefaultTableModel modelp4=(DefaultTableModel)jTable1.getModel();
   							   while(modelp4.getRowCount() > 0)
   							    {
         								mAddStockTextFieldPODate.setText("");
								mAddStockTextFieldPONo.setText("");
								mAddStockTextFieldCompanyName.setText("");	
								mAddStockTextFieldInvoice.setText("");
								mAddStockTextFieldGSTNo.setText("");	
								mAddStockLabelSubTotalValue.setText("");								
								mAddStockLabelTaxValue.setText("");								
								jLabel16.setText("");								
								mAddStockComboBox.setSelectedIndex(0);
								mAddStockComboBoxDay.setSelectedIndex(0);
								mAddStockComboBoxMonth.setSelectedIndex(0);
								mAddStockComboBoxYear.setSelectedIndex(0);
								
								int i;
								//int kk=0;					
         								for(i=0;i<modelp4.getRowCount();i++)
        								{ 
          								modelp4.removeRow(i);
        								}
     							    }					


						}
			
				}
				catch(Exception e)
				{
				}
			}
			else if(!(mAddStockTextFieldPODate.getText().equals("")))
			{
			

				try
				{
					//Connection con = dao.createconnection();
					DefaultTableModel model5=(DefaultTableModel)jTable1.getModel();
					int x5=model5.getRowCount();	
					int j5;
					for(j5=0;j5<x5;j5++)
					{
					PreparedStatement pss5 = con.prepareStatement("update  PurchaseOrder  set Quantity=? ,PPU=?, Total_Price=?,GST=? ,Invoice_No=? where Description=? and PO_NO=?");
					String quant=model5.getValueAt(j5,2 ).toString();					
					String ppu=model5.getValueAt(j5,3).toString();
					String gst=model5.getValueAt(j5,4 ).toString();
					String tot=model5.getValueAt(j5,5 ).toString();
					String desc=model5.getValueAt(j5,1 ).toString();
					//System.out.print(desc);
		
					pss5.setString(1,quant);
					pss5.setString(2,ppu);
					pss5.setString(3,tot);
					pss5.setString(4,gst);
					pss5.setString(5,mAddStockTextFieldInvoice.getText());
					pss5.setString(6,desc);
					pss5.setString(7,mAddStockTextFieldPONo.getText());
					int  zz5 = pss5.executeUpdate();
						if(zz5>0)      
						{
						
						}
					}
					PreparedStatement pss6 = con.prepareStatement("update PurchaseOrder2 set Delivery_Date=?,Total_Amount=?,Invoice_No=?,GST_No=?, Tax=?,Sub_Amount=?  where PO_NO=?");
					
					
					pss6.setString(1,date);
					pss6.setString(2, jLabel16.getText());
					pss6.setString(3,mAddStockTextFieldInvoice.getText());    
					pss6.setString(4,mAddStockTextFieldGSTNo.getText());
					pss6.setString(5,mAddStockLabelTaxValue.getText());
					pss6.setString(6,mAddStockLabelSubTotalValue.getText());
					pss6.setString(7,mAddStockTextFieldPONo.getText());    
					int  zz6 = pss6.executeUpdate();			
						if(zz6>0)      
						{




		       DefaultTableModel models=(DefaultTableModel)jTable1.getModel();
                            for(int i=0;i< models.getRowCount();i++)
                            {       
                                    String item_type=models.getValueAt(i,0).toString();
                                    String desc=models.getValueAt(i,1).toString();
                                    String qty=models.getValueAt(i,2).toString();
                            
                                    if(item_type.equals("Pins"))  //pins adition in database
                                    {
                                        String[] tokens_desc =desc.split(", ");
                                        String gau[] =tokens_desc[4].split(" ");

                                        String[] size_input= tokens_desc[0].split(" ");  //size conversion in cm
                                        float size=Float.parseFloat(size_input[0]);  
                                        if(size_input[1].equals("mm"))
                                        { 
                                          size*=.10;    //send this size in db for "size"
                                        }
                                        else if(size_input[1].equals("inch"))
                                        { 
                                          size*=2.54;  //send this size in db for "size"
                                        }
                                        else{}
		
                                        String[] qty_input= qty.split(" ");    //qty conversion
                                        float qty_conv=Float.parseFloat(qty_input[0]);
                                        //considered in "units"; 1 box=250 packets and 1 packet=20 units; 
                                        if(qty_input[1].equalsIgnoreCase("box"))
                                        { 
                                         qty_conv*=250*20;   //send this qty in db for "qty"
                                        }
                                        else if(qty_input[1].equalsIgnoreCase("packet"))
                                        { 
                                          qty_conv*=20;     //send this qty in db for "qty"
                                        }
                                        else{}
		
		try{

		     //Connection con2 = dao.createconnection();
                                          PreparedStatement ps = con.prepareStatement("select * from pins where Material=? and Size=? and Crown=? and Color=? and Gauge=? and Brand=?");
		     ps.setString(1,tokens_desc[1]);		
		     String size1=Float.toString(size);
		     ps.setString(2,size1);		
		     ps.setString(3,tokens_desc[3]);		
		     ps.setString(4,tokens_desc[5]);		
		     ps.setString(5,gau[0]);		
		     ps.setString(6,tokens_desc[6]);		
		     ResultSet rs =ps.executeQuery();
		     if(rs.next())
		    {
			
			
			float qt=rs.getFloat(8);
		 	float netqty= qty_conv+qt;

			PreparedStatement ps1 = con.prepareStatement("update pins set Qty_Left=?  where Material=? and Size=? and Crown=? and Color=? and Gauge=? and Brand=?");
		     	ps1.setFloat(1,netqty);		
		     	ps1.setString(2,tokens_desc[1]);		
		     	ps1.setString(3,size1);		
		     	ps1.setString(4,tokens_desc[3]);		
		     	ps1.setString(5,tokens_desc[5]);		
		     	ps1.setString(6,gau[0]);		
		     	ps1.setString(7,tokens_desc[6]);		
			int z1=ps1.executeUpdate();		     	

		    }
		    else
		    {
			
			
			PreparedStatement ps2 = con.prepareStatement("insert into pins values(?,?,?,?,?,?,?,?)");
		     	ps2.setString(1,tokens_desc[1]);		
		     	ps2.setString(2,size1);		
		     	ps2.setString(3,tokens_desc[3]);		
		     	ps2.setString(4,tokens_desc[5]);		
		     	ps2.setString(5,gau[0]);		
		     	ps2.setString(6,tokens_desc[6]);		
			ps2.setFloat(7,0.f);		
			ps2.setFloat(8,qty_conv);		
			int z2=ps2.executeUpdate();		     	
			


												
		    }

}


		    catch(Exception e)
		     {
			System.out.print(e);			
		      }                                        

                                        
                                    }
                                    
                                    else if(item_type.equals("Glue"))
                                    {

		   String[] tokens_desc =desc.split(", ");
                                       
                                        String[] qty_input= qty.split(" ");    //qty conversion
                                        float qty_conv=Float.parseFloat(qty_input[0]);
                                        //considered in litre; 1kg= 1litre, 1ml=1/1000 litre, 1gm=1/1000 litre 
                                        if(qty_input[1].equals("ml") || qty_input[1].equals("gm"))
                                        { 
                                         qty_conv*=0.001;   //send this qty in db for "qty"
                                        }
                                       
                                        
		try{

		     //Connection con3 = dao.createconnection();
                                          PreparedStatement ps = con.prepareStatement("select * from glue where Viscosity=? and Gel_Time=? and Moisture_Content=? and Color=?");
		     String vs[]=tokens_desc[0].split(" ");
		     String mc[]=tokens_desc[4].split("%");
		     String gt[]=tokens_desc[1].split(" ");
		     ps.setString(1,vs[0]);		
		     ps.setString(2,gt[0]);		
		     ps.setString(3,mc[0]);		
		     ps.setString(4,tokens_desc[2]);		
		     ResultSet rs =ps.executeQuery();
		    if(rs.next())
		    {
			
			
			float qt=rs.getFloat(6);
		 	float netqty= qty_conv+qt;

			PreparedStatement ps1 = con.prepareStatement("update glue set Qty_Left=?  where Viscosity=? and Gel_Time=? and Moisture_Content=? and Color=?");
		     	ps1.setFloat(1,netqty);		
		     	ps1.setString(2,vs[0]);		
		     	ps1.setString(3,gt[0]);		
		     	ps1.setString(4,mc[0]);		
		     	ps1.setString(5,tokens_desc[2]);		
		 	int z1=ps1.executeUpdate();		     	

		    }
		    else
		    {
			
			
			PreparedStatement ps2 = con.prepareStatement("insert into glue values(?,?,?,?,?,?)");
		     	ps2.setString(1,vs[0]);		
		     	ps2.setString(2,gt[0]);		
		     	ps2.setString(3,mc[0]);		
		     	ps2.setString(4,tokens_desc[2]);		
			ps2.setFloat(5,0.f);		
			ps2.setFloat(6,qty_conv);		
			int z2=ps2.executeUpdate();		     	
			


												
		    }

}


		    catch(Exception e)
		     {
			System.out.print(e);			
		      }                                        
                                    
                                    
                                    }
                                    
                                    else if(item_type.equals("Dye"))
                                    {
                                        String[] tokens_desc =desc.split(", ");
                                    
                                        String[] drying_speed_input=tokens_desc[1].split(" ");
                                        float drying_speed=Float.parseFloat(drying_speed_input[0]);
                                        //considered in min.;
                                        if(drying_speed_input[1].equals("Hr"))
                                        { 
                                            drying_speed*=60;    //send this speed as "drying speed " in the db table
                                        }
                                        else if(drying_speed_input[1].equals("Sec"))
                                        { 
                                            drying_speed*=1/60;    //send this speed as "drying speed " in the db table
                                        }
                                        else{}

                                        String[] qty_input= qty.split(" ");    //qty conversion
                                        float qty_conv=Float.parseFloat(qty_input[0]);
                                        //considered in bottle 1 unit=2 bottles, 1 bottle=1litre or 1 kg;
                                        if(qty_input[1].equals("Unit"))
                                        { 
                                         qty_conv*=2;   //send this qty in db for "qty"
                                        }

					try{

		   //  Connection con1 = dao.createconnection();
                                          PreparedStatement ps = con.prepareStatement("select * from dye where Type=? and Drying_Speed=? and GCMI_Code=? and Color=? and Brand=?");
		     ps.setString(1,tokens_desc[0]);		
		     String ds=Float.toString(drying_speed);
		     ps.setString(2,ds);		
		     ps.setString(3,tokens_desc[2]);		
		     ps.setString(4,tokens_desc[3]);		
		     ps.setString(5,tokens_desc[4]);		
		     ResultSet rs =ps.executeQuery();
		     if(rs.next())
		    {
			
			
			float qt=rs.getFloat(7);
		 	float netqty= qty_conv+qt;

			PreparedStatement ps1 = con.prepareStatement("update dye set Qty_Left=?  where Type=? and Drying_Speed=? and GCMI_Code=? and Color=? and Brand=?");
		     	ps1.setFloat(1,netqty);		
		     	ps1.setString(2,tokens_desc[0]);		
		     	ps1.setString(3,ds);		
		     	ps1.setString(4,tokens_desc[2]);		
		     	ps1.setString(5,tokens_desc[3]);		
		     	ps1.setString(6,tokens_desc[4]);		
			int z1=ps1.executeUpdate();		     	

		    }
		    else
		    {
			
			
			PreparedStatement ps2 = con.prepareStatement("insert into dye values(?,?,?,?,?,?,?)");
		     	ps2.setString(1,tokens_desc[0]);		
		     	ps2.setString(2,ds);		
		     	ps2.setString(3,tokens_desc[2]);		
		     	ps2.setString(4,tokens_desc[3]);		
		     	ps2.setString(5,tokens_desc[4]);		
			ps2.setFloat(6,0.f);		
			ps2.setFloat(7,qty_conv);		
			int z2=ps2.executeUpdate();		     	
			


												
		    }

}
		     catch(Exception e){}             
                                    

}

                                    else if(item_type.equals("Tapes"))
                                    {
                                        String[] tokens_desc =desc.split(", ");
                                    
                                        String[] thickness_input=tokens_desc[2].split(" ");
                                        float thickness=Float.parseFloat(thickness_input[0]);
                                        //considered in cm; mm,cm,inch
                                        if(thickness_input[1].equals("mm"))
                                        { 
                                            thickness*=0.10;    //send this thickness as "thickness" in the db table
                                        }
                                        else if(thickness_input[1].equals("inch"))
                                        { 
                                            thickness*=2.56;    //send this thickness as "thickness" in the db table
                                        }
		else{}
                                        
                                        String[] length_input=tokens_desc[3].split(" ");
                                        float length=Integer.parseInt(length_input[0]);
                                        //considered in cm; m,cm,inch
                                        if(length_input[1].equals("m"))
                                        { 
                                            length*=100;    //send this length as "length" in the db table
                                        }
                                        else if(length_input[1].equals("inch"))
                                        { 
                                            length*=2.56;    //send this length as "length" in the db table
                                        }
                                        else{}

                                        String[] qty_input= qty.split(" ");    //qty conversion
                                        float qty_conv=Integer.parseInt(qty_input[0]);
                                        //considered in unit; 1 kg=25 units, 1 box=2 kg;
                                        if(qty_input[1].equals("kg"))
                                        { 
                                         qty_conv*=25;   //send this qty in db for "qty"
                                        }
                                        else if(qty_input[1].equals("Box"))
                                        { 
                                         qty_conv*=2*25;   //send this qty in db for "qty"
                                        }
                                        
                                     try{

		     //Connection con2 = dao.createconnection();
                                          PreparedStatement ps = con.prepareStatement("select * from tapes where Backing_Material=? and Type=? and Total_Thickness=? and Length=? and Color=?");
		     ps.setString(1,tokens_desc[0]);		
		     ps.setString(2,tokens_desc[1]);
		     String th=Float.toString(thickness);		
		     String le=Float.toString(length);		
		     ps.setString(3,th);		
		     ps.setString(4,le);		
		     ps.setString(5,tokens_desc[4]);		
		     ResultSet rs =ps.executeQuery();
		     if(rs.next())
		    {
			
			
			float qt=rs.getFloat(7);
		 	float netqty= qty_conv+qt;

			PreparedStatement ps1 = con.prepareStatement("update tapes set Qty_Left=?  where Backing_Material=? and Type=? and Total_Thickness=? and Length=? and Color=?");
		     	ps1.setFloat(1,netqty);		
		     	ps1.setString(2,tokens_desc[0]);		
		     	ps1.setString(3,tokens_desc[1]);		
		     	ps1.setString(4,th);		
		     	ps1.setString(5,le);		
		     	ps1.setString(6,tokens_desc[4]);		
		     	int z1=ps1.executeUpdate();		     	

		    }
		    else
		    {
			
			
			PreparedStatement ps2 = con.prepareStatement("insert into tapes values(?,?,?,?,?,?,?)");
		     	ps2.setString(1,tokens_desc[0]);		
		     	ps2.setString(2,tokens_desc[1]);		
		     	ps2.setString(3,th);		
		     	ps2.setString(4,le);		
		     	ps2.setString(5,tokens_desc[4]);		
			ps2.setFloat(6,0.f);		
			ps2.setFloat(7,qty_conv);		
			int z2=ps2.executeUpdate();		     	
			


												
		    }

}


		    catch(Exception e)
		     {
			System.out.print(e);			
		      }                                        


                                    }
		
		


	                   else if(item_type.equals("Sheet"))
                                    {
                                        String[] tokens_desc =desc.split(", ");
                                    
                                        String[] thickness_input=tokens_desc[0].split(" ");
                                        float thickness=Float.parseFloat(thickness_input[0]);
                                        //considered in cm; mm,cm,inch
                                        if(thickness_input[1].equals("mm"))
                                        { 
                                            thickness*=0.10;    //send this thickness as "thickness" in the db table
                                        }
                                        else if(thickness_input[1].equals("inch"))
                                        { 
                                            thickness*=2.56;    //send this thickness as "thickness" in the db table
                                        }
                                        else{}


                                        String[] width_input=tokens_desc[4].split(" ");
                                        float width=Float.parseFloat(width_input[0]);
                                        //considered in cm; mm,m,cm,inch
                                        if(width_input[1].equals("m"))
                                        { 
                                            width*=100;    //send this width as "width" in the db table
                                        }
                                        else if(width_input[1].equals("inch"))
                                        { 
                                            width*=2.56;    //send this width as "width" in the db table
                                        }
                                        else if(width_input[1].equals("mm"))
                                        { 
                                            width*=0.10;    //send this width as "width" in the db table
                                        }
                                        else{}

                                        String[] qty_input= qty.split(" ");    //qty conversion
                                        float qty_conv=Float.parseFloat(qty_input[0]);
                                        //considered in kg; 1 roll=5kg; m in kg nahi mila; 1 ton = 1000 kg(approx)
                                        if(qty_input[1].equals("Roll"))
                                        { 
                                         qty_conv*=5;   //send this qty in db for "qty"
                                        }
                                       
                                        else if(qty_input[1].equals("Ton"))
                                        { 
                                         qty_conv*=1000;   //send this qty in db for "qty"
                                        }
                                       else if(qty_input[1].equals("Meter"))
                                        { 
                                         qty_conv*=10;   // thik
                                        }
		else{}
	
		 try{

		   // Connection con2 = dao.createconnection();
                                          PreparedStatement ps = con.prepareStatement("select * from sheets where Type=? and Width=? and Thickness=? and Color=? and Paper_Weight=?");
		     ps.setString(1,tokens_desc[1]);		
		     String wi=Float.toString(width);
		     String thic=Float.toString(thickness);
		     ps.setString(2,wi);		
		     ps.setString(3,thic);		
		     ps.setString(4,tokens_desc[3]);		
		     String pw[]=tokens_desc[2].split("gsm");
		     ps.setString(5,pw[0]);		
		     ResultSet rs =ps.executeQuery();
		     if(rs.next())
		    {
			
			
			float qt=rs.getFloat(7);
		 	float netqty= qty_conv+qt;

			PreparedStatement ps1 = con.prepareStatement("update sheets set Qty_Left=?  where Type=? and Width=? and Thickness=? and Color=? and Paper_Weight=?");
		     	ps1.setFloat(1,netqty);		
		     	ps1.setString(2,tokens_desc[1]);		
		     	ps1.setString(3,wi);		
		     	ps1.setString(4,thic);		
		     	ps1.setString(5,tokens_desc[3]);		
		     	ps1.setString(6,pw[0]);		
		     	int z1=ps1.executeUpdate();		     	

		    }
		    else
		    {
			
			
			PreparedStatement ps2 = con.prepareStatement("insert into sheets values(?,?,?,?,?,?,?)");
		     	ps2.setString(1,tokens_desc[1]);		
		     	ps2.setString(2,wi);		
		     	ps2.setString(3,thic);		
		     	ps2.setString(4,tokens_desc[3]);		
		     	ps2.setString(5,pw[0]);		
			ps2.setFloat(6,0.f);		
			ps2.setFloat(7, qty_conv);		
			int z2=ps2.executeUpdate();		     	
			


												
		    }

}


		    catch(Exception e)
		     {
			System.out.print(e);			
		      }                                        


                                        
		}
                                    
}




							  JOptionPane.showMessageDialog(new JFrame(),"Stock Added successfully");
							     DefaultTableModel modelp5=(DefaultTableModel)jTable1.getModel();
   							   while(modelp5.getRowCount() > 0)
   							    {
         								mAddStockTextFieldPODate.setText("");
								mAddStockTextFieldPONo.setText("");
								mAddStockTextFieldCompanyName.setText("");	
								mAddStockTextFieldInvoice.setText("");
								mAddStockTextFieldGSTNo.setText("");	
								mAddStockLabelSubTotalValue.setText("");								
								mAddStockLabelTaxValue.setText("");								
								jLabel16.setText("");								
								mAddStockComboBox.setSelectedIndex(0);
								mAddStockComboBoxDay.setSelectedIndex(0);
								mAddStockComboBoxMonth.setSelectedIndex(0);
								mAddStockComboBoxYear.setSelectedIndex(0);
								int i;
								//int kk=0;					
         								for(i=0;i<modelp5.getRowCount();i++)
        								{ 
          								modelp5.removeRow(i);
        								}
     							    }					


						

				







						}

			
				}
				catch(Exception e)
				{
					System.out.print(e);
				}




			}
			else{}

}
  // TODO add your handling code here: 
        
// TODO add your handling code here:
    }                                                  

    private void mAddStockButtonResetActionPerformed(java.awt.event.ActionEvent evt) {                                                     
                   mAddStockTextFieldPONo.setEditable(true);
	mAddStockComboBox.setEnabled(true);
	row1=0; //**
	DefaultTableModel modelp1=(DefaultTableModel)jTable1.getModel();
   					while(modelp1.getRowCount() > 0)
   					{
         						int i;
         						for(i=0;i<modelp1.getRowCount();i++)
        						{ 
          							modelp1.removeRow(i);
        						}
     					}
	mAddStockTextFieldPODate.setText("");
	mAddStockTextFieldInvoice.setText("");
	mAddStockTextFieldPONo.setText("");
	mAddStockTextFieldCompanyName.setText("");					
	mAddStockTextFieldGSTNo.setText("");
	mAddStockComboBox.setSelectedIndex(0);
	jLabel16.setText("");
	mAddStockLabelSubTotalValue.setText("");
	mAddStockLabelTaxValue.setText("");
	mAddStockComboBoxDay.setSelectedIndex(0);
	mAddStockComboBoxMonth.setSelectedIndex(0);
	mAddStockComboBoxYear.setSelectedIndex(0);
													

        // TODO add your handling code here:
    }                                                    

    private void mAddStockButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {                                                      
new InventoryDashboard(fr).setVisible(true);
dispose();        // TODO add your handling code here:
        
       // TODO add your handling code here:
    }                                                     

    private void mAddStockComboBoxYearActionPerformed(java.awt.event.ActionEvent evt) {                                                      
        // TODO add your handling code here:
    }                                                     

    private void mAddStockComboBoxMonthActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        // TODO add your handling code here:
    }                                                      

    private void mAddStockComboBoxDayActionPerformed(java.awt.event.ActionEvent evt) {                                                     
        // TODO add your handling code here:
    }                                                    

    private void mAddStockButtonPinsActionPerformed(java.awt.event.ActionEvent evt) {                                                    
              new StaplePins(2,ff).setVisible(true);// TODO add your handling code here:
ff.setEnabled(false);// TODO add your handling code here:
    }                                                   

    private void mAddStockButtonGlueActionPerformed(java.awt.event.ActionEvent evt) {                                                    
        new Glue(2,ff).setVisible(true);// TODO add your handling code here:
ff.setEnabled(false);
        // TODO add your handling code here:
    }                                                   

    private void mAddStockButtonTapesActionPerformed(java.awt.event.ActionEvent evt) {                                                     
      new Tapes(2,ff).setVisible(true);// TODO add your handling code here:
      ff.setEnabled(false);  // TODO add your handling code here:
    }                                                    

    private void mAddStockButtonColorActionPerformed(java.awt.event.ActionEvent evt) {                                                     
              new Dye(2,ff).setVisible(true);// TODO add your handling code here:
ff.setEnabled(false);// TODO add your handling code here:
    }                                                    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddStock1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddStock1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddStock1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddStock1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddStock1(new JFrame()).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JButton mAddStockButtonAdd;
    private javax.swing.JButton mAddStockButtonCancel;
    private javax.swing.JButton mAddStockButtonColor;
    private javax.swing.JButton mAddStockButtonGlue;
    private javax.swing.JButton mAddStockButtonPins;
    private javax.swing.JButton mAddStockButtonReset;
    private javax.swing.JButton mAddStockButtonSheets;
    private javax.swing.JButton mAddStockButtonTapes;
    private javax.swing.JComboBox<String> mAddStockComboBox;
    private javax.swing.JComboBox<String> mAddStockComboBoxDay;
    private javax.swing.JComboBox<String> mAddStockComboBoxMonth;
    private javax.swing.JComboBox<String> mAddStockComboBoxYear;
    private javax.swing.JLabel mAddStockLabelDeleteImage;
    private javax.swing.JLabel mAddStockLabelNetAmountValue;
    private javax.swing.JLabel mAddStockLabelSubTotalValue;
    private javax.swing.JLabel mAddStockLabelTaxValue;
    private javax.swing.JTextField mAddStockTextFieldCompanyName;
    private javax.swing.JTextField mAddStockTextFieldGSTNo;
    private javax.swing.JTextField mAddStockTextFieldInvoice;
    private javax.swing.JTextField mAddStockTextFieldPODate;
    private javax.swing.JTextField mAddStockTextFieldPONo;
    // End of variables declaration                   
}
