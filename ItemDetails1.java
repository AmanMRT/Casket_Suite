/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package micpro;

import java.awt.Cursor;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.table.AbstractTableModel;
import java.awt.event.*;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.table.*;
import javax.swing.*;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author ashok
 */
public class ItemDetails1 extends javax.swing.JFrame {
String aadhar="";
String ide;
JFrame fr,fr1;
int pro1;
    /** Creates new form ItemDetails */
    public ItemDetails1(String a,JFrame ft,JFrame ft1) {
fr=ft;
fr1=ft1;
aadhar =a;

                getContentPane().setBackground(new java.awt.Color(245,245,245));
      setTitle("Item Specifications");
setLocation(350,70);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jComboBox4 = new javax.swing.JComboBox<>();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        mItemDetailsComboBoxSlotted = new javax.swing.JComboBox();
        mItemDetailsComboBoxTelscope = new javax.swing.JComboBox<>();
        mItemDetailsComboBoxFolder = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        mItemDetailsTextFieldHeight = new javax.swing.JTextField();
        mItemDetailsComboBoxUnit = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        mItemDetailsTextFieldQuantity = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        mItemDetailsRadioButtonSingleFace = new javax.swing.JRadioButton();
        mItemDetailsRadioButtonSingleWall = new javax.swing.JRadioButton();
        jLabel8 = new javax.swing.JLabel();
        mItemDetailsRadioButtonB = new javax.swing.JRadioButton();
        mItemDetailsRadioButtonC = new javax.swing.JRadioButton();
        mItemDetailsRadioButtonE = new javax.swing.JRadioButton();
        mItemDetailsRadioButtonBC = new javax.swing.JRadioButton();
        jLabel9 = new javax.swing.JLabel();
        mItemDetailsRadioButtonStiching = new javax.swing.JRadioButton();
        mItemDetailsRadioButtonPasting = new javax.swing.JRadioButton();
        mItemDetailsRadioButtonBoth = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        mItemDetailsCheckBoxPrinted = new javax.swing.JCheckBox();
        jLabel10 = new javax.swing.JLabel();
        mItemDetailsCheckBoxTop = new javax.swing.JCheckBox();
        mItemDetailsCheckBoxLeft = new javax.swing.JCheckBox();
        mItemDetailsCheckBoxRight = new javax.swing.JCheckBox();
        mItemDetailsCheckBoxFront = new javax.swing.JCheckBox();
        mItemDetailsCheckBoxBack = new javax.swing.JCheckBox();
        mItemDetailsTextFieldBreadth = new javax.swing.JTextField();
        mItemDetailsTextFieldLength = new javax.swing.JTextField();
        mItemDetailsRadioButtonDoubleWall = new javax.swing.JRadioButton();
        mItemDetailsRadioButtonTripleWall = new javax.swing.JRadioButton();
        mItemDetailsButtonCancel = new javax.swing.JButton();
        mItemDetailsButtonReset = new javax.swing.JButton();
        mItemDetailsButtonAdd = new javax.swing.JButton();

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

//        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent windowEvent){
               dispose();
               fr1.setEnabled(true);
         }        
      });    

        jPanel1.setBackground(new java.awt.Color(245, 245, 245));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Product Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(0, 0, 255))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Box Type");

        mItemDetailsComboBoxSlotted.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<html><b>Slotted</b></html>", "Regular Slotted Container", "Half Slotted Container", "Overlap Slotted Container", "Full Slotted Container", "Snap Lock",}));
        mItemDetailsComboBoxSlotted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemDetailsComboBoxSlottedActionPerformed(evt);
            }
        });

        mItemDetailsComboBoxTelscope.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<html><b>Telescope</b></html>", "Full Telescope Design", "Design Style Container", "Double Style Container" }));
        mItemDetailsComboBoxTelscope.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemDetailsComboBoxTelscopeActionPerformed(evt);
            }
        });

        mItemDetailsComboBoxFolder.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<html><b>Folder</b></html>", "One Piece Folder", "Five Panel Folder", "OPF with Dust Flap "  }));
        mItemDetailsComboBoxFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemDetailsComboBoxFolderActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Box Size");

        jLabel3.setText("Length");

        jLabel4.setText("Breadth");

        jLabel5.setText("Height");

        mItemDetailsTextFieldHeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemDetailsTextFieldHeightActionPerformed(evt);
            }
        });
        mItemDetailsTextFieldLength.addKeyListener(new KeyAdapter()       //validation
        {
            public void keyTyped(KeyEvent e)
            {
                char c=e.getKeyChar();
                if(((c<'0') || (c>'9')) && (c!=KeyEvent.VK_BACK_SPACE))
                {
                    e.consume();//ignore event
                }
                else if(mItemDetailsTextFieldLength.getText().length()>5)
                {
                   e.consume();
                }
               
            }
        });
        mItemDetailsTextFieldBreadth.addKeyListener(new KeyAdapter()       //validation
        {
            public void keyTyped(KeyEvent e)
            {
                char c=e.getKeyChar();
                if(((c<'0') || (c>'9')) && (c!=KeyEvent.VK_BACK_SPACE))
                {
                    e.consume();//ignore event
                }
                else if(mItemDetailsTextFieldBreadth.getText().length()>5)
                {
                   e.consume();
                }
               
            }
        });
        mItemDetailsTextFieldHeight.addKeyListener(new KeyAdapter()       //validation
        {
            public void keyTyped(KeyEvent e)
            {
                char c=e.getKeyChar();
                if(((c<'0') || (c>'9')) && (c!=KeyEvent.VK_BACK_SPACE))
                {
                    e.consume();//ignore event
                }
                else if(mItemDetailsTextFieldHeight.getText().length()>5)
                {
                   e.consume();
                }
               
            }
        });
        mItemDetailsTextFieldQuantity.addKeyListener(new KeyAdapter()       //validation
        {
            public void keyTyped(KeyEvent e)
            {
                char c=e.getKeyChar();
                if(((c<'0') || (c>'9')) && (c!=KeyEvent.VK_BACK_SPACE))
                {
                    e.consume();//ignore event
                }
                else if(mItemDetailsTextFieldQuantity.getText().length()>5)
                {
                   e.consume();
                }
               
            }
        });



        mItemDetailsComboBoxUnit.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "mm", "cm", "inch" }));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Quantity");

        mItemDetailsTextFieldQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemDetailsTextFieldQuantityActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("No of Walls");

        buttonGroup1.add(mItemDetailsRadioButtonSingleFace);
        mItemDetailsRadioButtonSingleFace.setText("Single Face");
        mItemDetailsRadioButtonSingleFace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemDetailsRadioButtonSingleFaceActionPerformed(evt);
            }
        });

        buttonGroup1.add(mItemDetailsRadioButtonSingleWall);
        mItemDetailsRadioButtonSingleWall.setText("Single Wall (3 Ply)");
        mItemDetailsRadioButtonSingleWall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemDetailsRadioButtonSingleWallActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("Flute Type");

        buttonGroup3.add(mItemDetailsRadioButtonB);
        mItemDetailsRadioButtonB.setText("B");
        mItemDetailsRadioButtonB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemDetailsRadioButtonBActionPerformed(evt);
            }
        });

        buttonGroup3.add(mItemDetailsRadioButtonC);
        mItemDetailsRadioButtonC.setText("C");
        mItemDetailsRadioButtonC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemDetailsRadioButtonCActionPerformed(evt);
            }
        });

        buttonGroup3.add(mItemDetailsRadioButtonE);
        mItemDetailsRadioButtonE.setText("E");
        mItemDetailsRadioButtonE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemDetailsRadioButtonEActionPerformed(evt);
            }
        });

        buttonGroup3.add(mItemDetailsRadioButtonBC);
        mItemDetailsRadioButtonBC.setText("BC");
        mItemDetailsRadioButtonBC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemDetailsRadioButtonBCActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("Sticthing/Pasting");

        buttonGroup2.add(mItemDetailsRadioButtonStiching);
        mItemDetailsRadioButtonStiching.setText("Sticthing");
        mItemDetailsRadioButtonStiching.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemDetailsRadioButtonStichingActionPerformed(evt);
            }
        });

        buttonGroup2.add(mItemDetailsRadioButtonPasting);
        mItemDetailsRadioButtonPasting.setText("Pasting");
        mItemDetailsRadioButtonPasting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemDetailsRadioButtonPastingActionPerformed(evt);
            }
        });

        buttonGroup2.add(mItemDetailsRadioButtonBoth);
        mItemDetailsRadioButtonBoth.setText("Both");
        mItemDetailsRadioButtonBoth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemDetailsRadioButtonBothActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(245, 245, 245));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Design Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Segoe UI", 0, 12), new java.awt.Color(0, 0, 255))); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Face", "File Name", "File Location", "Size(cmxcm)", "Colored (Yes/No)"
            }
        ));
        jTable1.setAutoscrolls(false);
        jScrollPane1.setViewportView(jTable1);

        mItemDetailsCheckBoxPrinted.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        mItemDetailsCheckBoxPrinted.setText("Printed ?");
        mItemDetailsCheckBoxPrinted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemDetailsCheckBoxPrintedActionPerformed(evt);
            }
        });

	mItemDetailsCheckBoxTop.setEnabled(false);
	mItemDetailsCheckBoxBack.setEnabled(false);
	mItemDetailsCheckBoxLeft.setEnabled(false);
	mItemDetailsCheckBoxRight.setEnabled(false);
	mItemDetailsCheckBoxLeft.setEnabled(false);
	mItemDetailsCheckBoxFront.setEnabled(false);
		

        mItemDetailsCheckBoxPrinted.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent e) {
                if(mItemDetailsCheckBoxPrinted.isSelected())
	{
	mItemDetailsCheckBoxTop.setEnabled(true);
	mItemDetailsCheckBoxBack.setEnabled(true);
	mItemDetailsCheckBoxLeft.setEnabled(true);
	mItemDetailsCheckBoxRight.setEnabled(true);
	mItemDetailsCheckBoxLeft.setEnabled(true);
	mItemDetailsCheckBoxFront.setEnabled(true);
	
	}
	else if(!(mItemDetailsCheckBoxPrinted.isSelected()))
	{        
	mItemDetailsCheckBoxTop.setEnabled(false);
	mItemDetailsCheckBoxBack.setEnabled(false);
	mItemDetailsCheckBoxLeft.setEnabled(false);
	mItemDetailsCheckBoxRight.setEnabled(false);
	mItemDetailsCheckBoxLeft.setEnabled(false);
    	mItemDetailsCheckBoxFront.setEnabled(false);
    
    	
     	DefaultTableModel model1=(DefaultTableModel)jTable1.getModel(); 
     	while(model1.getRowCount() > 0)
	{
	    model1.removeRow(0);
	}



	}
	else{}


            }
        });
        mItemDetailsCheckBoxTop.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent e) {
                if(mItemDetailsCheckBoxTop.isSelected())
	{
	DefaultTableModel modelp1=(DefaultTableModel)jTable1.getModel();
	modelp1.addRow(new Object[]{" Top Face","","","",""});
	}
	else if(!(mItemDetailsCheckBoxTop.isSelected()))
	{
		DefaultTableModel mod=(DefaultTableModel)jTable1.getModel();
		int ro=mod.getRowCount();
		for(int i=0;i<ro;i++)
		{
			String it =mod.getValueAt(i, 0).toString();
			if(it.equals(" Top Face"))
			{
				mod.removeRow(i);
			}				           	
		}
	//modelp1.removeRow(0);
	}
	else{}
	}
	});
     mItemDetailsCheckBoxLeft.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent e) {
                if(mItemDetailsCheckBoxLeft.isSelected())
	{
	DefaultTableModel modelp2=(DefaultTableModel)jTable1.getModel();
	modelp2.addRow(new Object[]{" Left Face","","","",""});
	}
	else if(!(mItemDetailsCheckBoxLeft.isSelected()))
	{
		DefaultTableModel mod2=(DefaultTableModel)jTable1.getModel();
		int ro2=mod2.getRowCount();
		for(int i=0;i<ro2;i++)
		{
			String it2 =mod2.getValueAt(i, 0).toString();
			if(it2.equals(" Left Face"))
			{
				mod2.removeRow(i);
			}				           	
		}
	//modelp1.removeRow(0);
	}
	else{}
	}
	});

mItemDetailsCheckBoxRight.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent e) {
                if(mItemDetailsCheckBoxRight.isSelected())
	{
	DefaultTableModel modelp3=(DefaultTableModel)jTable1.getModel();
	modelp3.addRow(new Object[]{" Right Face","","","",""});
	}
	else if(!(mItemDetailsCheckBoxRight.isSelected()))
	{
		DefaultTableModel mod3=(DefaultTableModel)jTable1.getModel();
		int ro3=mod3.getRowCount();
		for(int i=0;i<ro3;i++)
		{
			String it3 =mod3.getValueAt(i, 0).toString();
			if(it3.equals(" Right Face"))
			{
				mod3.removeRow(i);
			}				           	
		}
	//modelp1.removeRow(0);
	}
	else{}
	}
	});

mItemDetailsCheckBoxFront.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent e) {
                if(mItemDetailsCheckBoxFront.isSelected())
	{
	DefaultTableModel modelp4=(DefaultTableModel)jTable1.getModel();
	modelp4.addRow(new Object[]{" Front Face","","","",""});
	}
	else if(!(mItemDetailsCheckBoxFront.isSelected()))
	{
		DefaultTableModel mod4=(DefaultTableModel)jTable1.getModel();
		int ro4=mod4.getRowCount();
		for(int i=0;i<ro4;i++)
		{
			String it4 =mod4.getValueAt(i, 0).toString();
			if(it4.equals(" Front Face"))
			{
				mod4.removeRow(i);
			}				           	
		}
	//modelp1.removeRow(0);
	}
	else{}
	}
	});

mItemDetailsCheckBoxBack.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent e) {
                if(mItemDetailsCheckBoxBack.isSelected())
	{
	DefaultTableModel modelp5=(DefaultTableModel)jTable1.getModel();
	modelp5.addRow(new Object[]{" Back Face","","","",""});
	}
	else if(!(mItemDetailsCheckBoxBack.isSelected()))
	{
		DefaultTableModel mod5=(DefaultTableModel)jTable1.getModel();
		int ro5=mod5.getRowCount();
		for(int i=0;i<ro5;i++)
		{
			String it5 =mod5.getValueAt(i, 0).toString();
			if(it5.equals(" Back Face"))
			{
				mod5.removeRow(i);
			}				           	
		}
	//modelp1.removeRow(0);
	}
	else{}
	}
	});
        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("Select Face");

        mItemDetailsCheckBoxTop.setText("Top Face");
        mItemDetailsCheckBoxTop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemDetailsCheckBoxTopActionPerformed(evt);
            }
        });

        mItemDetailsCheckBoxLeft.setText("Left Face");
        mItemDetailsCheckBoxLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemDetailsCheckBoxLeftActionPerformed(evt);
            }
        });

        mItemDetailsCheckBoxRight.setText("Right Face");
        mItemDetailsCheckBoxRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemDetailsCheckBoxRightActionPerformed(evt);
            }
        });

        mItemDetailsCheckBoxFront.setText("Front Face");
        mItemDetailsCheckBoxFront.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemDetailsCheckBoxFrontActionPerformed(evt);
            }
        });

        mItemDetailsCheckBoxBack.setText("Back Face");
        mItemDetailsCheckBoxBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemDetailsCheckBoxBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mItemDetailsCheckBoxPrinted)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(mItemDetailsCheckBoxTop)
                                .addGap(18, 18, 18)
                                .addComponent(mItemDetailsCheckBoxLeft)
                                .addGap(18, 18, 18)
                                .addComponent(mItemDetailsCheckBoxRight)
                                .addGap(18, 18, 18)
                                .addComponent(mItemDetailsCheckBoxFront)
                                .addGap(18, 18, 18)
                                .addComponent(mItemDetailsCheckBoxBack))
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mItemDetailsCheckBoxPrinted)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mItemDetailsCheckBoxTop)
                    .addComponent(mItemDetailsCheckBoxLeft)
                    .addComponent(mItemDetailsCheckBoxRight)
                    .addComponent(mItemDetailsCheckBoxFront)
                    .addComponent(mItemDetailsCheckBoxBack))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        mItemDetailsTextFieldBreadth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemDetailsTextFieldBreadthActionPerformed(evt);
            }
        });

        mItemDetailsTextFieldLength.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemDetailsTextFieldLengthActionPerformed(evt);
            }
        });

        buttonGroup1.add(mItemDetailsRadioButtonDoubleWall);
        mItemDetailsRadioButtonDoubleWall.setText("Double Wall (5 Ply)");
        mItemDetailsRadioButtonDoubleWall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemDetailsRadioButtonDoubleWallActionPerformed(evt);
            }
        });

        buttonGroup1.add(mItemDetailsRadioButtonTripleWall);
        mItemDetailsRadioButtonTripleWall.setText("Triple Wall (7 Ply)");
        mItemDetailsRadioButtonTripleWall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemDetailsRadioButtonTripleWallActionPerformed(evt);
            }
        });



     JTextField textBox3=new JTextField();      //shweta
        TableColumn soprtColumn3=jTable1.getColumnModel().getColumn(3);
        soprtColumn3.setCellEditor(new DefaultCellEditor (textBox3));
        jTable1.setCellSelectionEnabled(true);

        textBox3.addFocusListener(new FocusAdapter()
        {
            
			public void focusGained(FocusEvent fe)
			{
			}
			public void focusLost(FocusEvent fe)
			{
				if(textBox3.getText().trim().length()>0)
        				{
        			        Pattern pattern = Pattern.compile("^([0-9][0-9]x[0-9][0-9])$", Pattern.CASE_INSENSITIVE);
           				Matcher m=pattern.matcher(textBox3.getText());
           				Boolean b=m.matches();
           				if(b!=true)
           				{
           				    JOptionPane.showMessageDialog(new JFrame(),"Invalid Image Size");
           				}
                                        }
                                        else {
                                    JOptionPane.showMessageDialog(new JFrame(),"Enter Image Size");
                                }
                                        
      			
		}	
		});
        
        JTextField textBox1=new JTextField();      //shweta
        TableColumn soprtColumn1=jTable1.getColumnModel().getColumn(1);
        soprtColumn1.setCellEditor(new DefaultCellEditor (textBox1));
        jTable1.setCellSelectionEnabled(true);

        textBox1.addFocusListener(new FocusAdapter()
        {
            
			public void focusGained(FocusEvent fe)
			{
			}
			public void focusLost(FocusEvent fe)
			{
				if(textBox1.getText().trim().length()>0)
        				{
        			        Pattern pattern = Pattern.compile("^((.*/)*.+\\.(png|jpg|gif|bmp|jpeg|PNG|JPG|GIF|BMP))$", Pattern.CASE_INSENSITIVE);
           				Matcher m=pattern.matcher(textBox1.getText());
           				Boolean b=m.matches();
           				if(b!=true)
           				{
           				    JOptionPane.showMessageDialog(new JFrame(),"Invalid Filename");
           				}
      			}
                                else{
                                JOptionPane.showMessageDialog(new JFrame(),"Enter Filename");
                                }
		}	
		});
        
        JTextField textBox2=new JTextField();      //shweta
        TableColumn soprtColumn2=jTable1.getColumnModel().getColumn(2);
        soprtColumn2.setCellEditor(new DefaultCellEditor (textBox2));
        jTable1.setCellSelectionEnabled(true);

        textBox2.addFocusListener(new FocusAdapter()
        {
            
			public void focusGained(FocusEvent fe)
			{
			}
			public void focusLost(FocusEvent fe)
			{
				if(textBox2.getText().trim().length()>0)
        				{
        			        Pattern pattern = Pattern.compile("^[a-zA-Z]:\\\\[\\\\\\S|*\\S]?.*$", Pattern.CASE_INSENSITIVE);
           				Matcher m=pattern.matcher(textBox2.getText());
           				Boolean b=m.matches();
           				if(b!=true)
           				{
           				    JOptionPane.showMessageDialog(new JFrame(),"Invalid Filepath");
           				}
      			}
                                else{
                                JOptionPane.showMessageDialog(new JFrame(),"Enter Filename");
                                }
		}	
		});
        
        
        JTextField textBox4=new JTextField();      //shweta
        TableColumn soprtColumn4=jTable1.getColumnModel().getColumn(4);
        soprtColumn4.setCellEditor(new DefaultCellEditor (textBox4));
        jTable1.setCellSelectionEnabled(true);

        textBox4.addFocusListener(new FocusAdapter()
        {
            
			public void focusGained(FocusEvent fe)
			{
			}
			public void focusLost(FocusEvent fe)
			{
				if(textBox4.getText().trim().length()>0)
        				{
        			        
           				if(!(textBox4.getText().equalsIgnoreCase("yes") || textBox4.getText().equalsIgnoreCase("no")))
           				{
           				    JOptionPane.showMessageDialog(new JFrame(),"Invalid text");
           				}
      			}
                                else{
                                JOptionPane.showMessageDialog(new JFrame(),"Enter YES/NO");
                                }
		}	
		});
            
            



        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(mItemDetailsRadioButtonB)
                                    .addComponent(jLabel8))
                                .addGap(76, 76, 76)
                                .addComponent(mItemDetailsRadioButtonE)
                                .addGap(41, 41, 41)
                                .addComponent(mItemDetailsRadioButtonBC)
                                .addGap(62, 62, 62)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(mItemDetailsRadioButtonStiching)
                                        .addGap(64, 64, 64)
                                        .addComponent(mItemDetailsRadioButtonPasting))
                                    .addComponent(jLabel9)))
                            .addComponent(jLabel7)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(mItemDetailsRadioButtonSingleFace)
                                .addGap(64, 64, 64)
                                .addComponent(mItemDetailsRadioButtonSingleWall)
                                .addGap(54, 54, 54)
                                .addComponent(mItemDetailsRadioButtonDoubleWall))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(mItemDetailsRadioButtonC)
                                        .addComponent(mItemDetailsTextFieldLength, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel3))
                                .addGap(11, 11, 11)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(mItemDetailsTextFieldBreadth, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(mItemDetailsTextFieldHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(mItemDetailsComboBoxUnit, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel5))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(jLabel1)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(mItemDetailsComboBoxSlotted, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(mItemDetailsComboBoxTelscope, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(mItemDetailsComboBoxFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(mItemDetailsRadioButtonTripleWall)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel6)
                                .addComponent(mItemDetailsTextFieldQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(mItemDetailsRadioButtonBoth))
                        .addGap(0, 15, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mItemDetailsComboBoxSlotted, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mItemDetailsComboBoxTelscope, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mItemDetailsComboBoxFolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mItemDetailsTextFieldHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mItemDetailsComboBoxUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mItemDetailsTextFieldQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mItemDetailsTextFieldBreadth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mItemDetailsTextFieldLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mItemDetailsRadioButtonSingleFace)
                    .addComponent(mItemDetailsRadioButtonSingleWall)
                    .addComponent(mItemDetailsRadioButtonDoubleWall)
                    .addComponent(mItemDetailsRadioButtonTripleWall))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mItemDetailsRadioButtonB)
                    .addComponent(mItemDetailsRadioButtonC)
                    .addComponent(mItemDetailsRadioButtonE)
                    .addComponent(mItemDetailsRadioButtonBC)
                    .addComponent(mItemDetailsRadioButtonStiching)
                    .addComponent(mItemDetailsRadioButtonPasting)
                    .addComponent(mItemDetailsRadioButtonBoth))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

      mItemDetailsButtonCancel.setToolTipText("Cancel");
      mItemDetailsButtonCancel.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

      
      mItemDetailsButtonReset.setToolTipText("Reset");
      mItemDetailsButtonReset.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));

      mItemDetailsButtonAdd.setToolTipText("Add item");
      mItemDetailsButtonAdd.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));





        mItemDetailsButtonCancel.setText("Cancel");
        mItemDetailsButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemDetailsButtonCancelActionPerformed(evt);
            }
        });

        mItemDetailsButtonReset.setText("Reset");
        mItemDetailsButtonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemDetailsButtonResetActionPerformed(evt);
            }
        });

        mItemDetailsButtonAdd.setText("Add");
        mItemDetailsButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemDetailsButtonAddActionPerformed(evt);
            }
        });


try
{
Connection con = dao.createconnection();
PreparedStatement ps2 = con.prepareStatement("select * from Req where Aadhar=?");
ps2.setString(1,aadhar);
ResultSet rs=ps2.executeQuery();
if(rs.last())
{
String proid=rs.getString(1);
int pro=Integer.parseInt(proid);
pro1=pro+1;

if(pro1<10)
{
ide="000"+Integer.toString(pro1);
}
else if(pro1<100)
{
ide="00"+Integer.toString(pro1);
}
else if(pro1<1000)
{
ide="000"+Integer.toString(pro1);
}

else{
ide=Integer.toString(pro1);
}

}

else
{
pro1=0001;
ide="0001";
}

}
catch(Exception ee)
{
System.out.print(ee);
}



        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(mItemDetailsButtonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mItemDetailsButtonReset)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mItemDetailsButtonCancel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mItemDetailsButtonCancel)
                    .addComponent(mItemDetailsButtonReset)
                    .addComponent(mItemDetailsButtonAdd))
                .addGap(13, 13, 13))
        );

        pack();
    }// </editor-fold>                        

    private void mItemDetailsTextFieldQuantityActionPerformed(java.awt.event.ActionEvent evt) {                                                              
        // TODO add your handling code here:
    }                                                             

    private void mItemDetailsRadioButtonSingleFaceActionPerformed(java.awt.event.ActionEvent evt) {                                                                  
        // TODO add your handling code here:
    }                                                                 

    private void mItemDetailsRadioButtonSingleWallActionPerformed(java.awt.event.ActionEvent evt) {                                                                  
        // TODO add your handling code here:
    }                                                                 

    private void mItemDetailsRadioButtonBActionPerformed(java.awt.event.ActionEvent evt) {                                                         
        // TODO add your handling code here:
    }                                                        

    private void mItemDetailsRadioButtonCActionPerformed(java.awt.event.ActionEvent evt) {                                                         
        // TODO add your handling code here:
    }                                                        

    private void mItemDetailsRadioButtonEActionPerformed(java.awt.event.ActionEvent evt) {                                                         
        // TODO add your handling code here:
    }                                                        

    private void mItemDetailsRadioButtonBCActionPerformed(java.awt.event.ActionEvent evt) {                                                          
        // TODO add your handling code here:
    }                                                         

    private void mItemDetailsRadioButtonStichingActionPerformed(java.awt.event.ActionEvent evt) {                                                                
        // TODO add your handling code here:
    }                                                               

    private void mItemDetailsRadioButtonPastingActionPerformed(java.awt.event.ActionEvent evt) {                                                               
        // TODO add your handling code here:
    }                                                              

    private void mItemDetailsRadioButtonBothActionPerformed(java.awt.event.ActionEvent evt) {                                                            
        // TODO add your handling code here:
    }                                                           

    private void mItemDetailsCheckBoxPrintedActionPerformed(java.awt.event.ActionEvent evt) {                                                            
        // TODO add your handling code here:
    }                                                           

    private void mItemDetailsButtonAddActionPerformed(java.awt.event.ActionEvent evt) {                                                      
             DefaultTableModel model9=(DefaultTableModel)jTable1.getModel();
               int xx=model9.getRowCount();

        if(mItemDetailsComboBoxFolder.getSelectedIndex()==0 && mItemDetailsComboBoxSlotted.getSelectedIndex()==0 && mItemDetailsComboBoxTelscope.getSelectedIndex()==0 )
        {
             JOptionPane.showMessageDialog(new JFrame(),"Select Box Type");
        }
     else if((mItemDetailsTextFieldLength.getText().trim().equals(""))) 
        {
            JOptionPane.showMessageDialog(new JFrame(),"Length can't be empty");
        }
    else if((mItemDetailsTextFieldBreadth.getText().trim().equals(""))) 
        {
            JOptionPane.showMessageDialog(new JFrame(),"Breadth can't be empty");
        }
    else if((mItemDetailsTextFieldHeight.getText().trim().equals(""))) 
        {
            JOptionPane.showMessageDialog(new JFrame(),"Height can't be empty");
        }
    else if((mItemDetailsTextFieldQuantity.getText().trim().equals(""))) 
        {
            JOptionPane.showMessageDialog(new JFrame(),"Quantity can't be empty");
        }
    else if(!(mItemDetailsRadioButtonSingleFace.isSelected() || mItemDetailsRadioButtonSingleWall.isSelected() || mItemDetailsRadioButtonDoubleWall.isSelected() || mItemDetailsRadioButtonTripleWall.isSelected()))
        {
            JOptionPane.showMessageDialog(new JFrame(),"Select No. of Walls");
        }
    else if(!(mItemDetailsRadioButtonB.isSelected() || mItemDetailsRadioButtonC.isSelected() || mItemDetailsRadioButtonE.isSelected() || mItemDetailsRadioButtonBC.isSelected()))
        {
            JOptionPane.showMessageDialog(new JFrame(),"Select Flute Type");
        }
    else if(!(mItemDetailsRadioButtonStiching.isSelected() || mItemDetailsRadioButtonPasting.isSelected() || mItemDetailsRadioButtonBoth.isSelected() ))
        {
            JOptionPane.showMessageDialog(new JFrame(),"Select Stitching/Pasting");
        }
      else if(mItemDetailsCheckBoxPrinted.isSelected()&&xx==0)
        {
        
              JOptionPane.showMessageDialog(new JFrame(),"Please enter print details");                
        }
        
else{    
        
       
String a=mItemDetailsTextFieldLength.getText();
String b=mItemDetailsTextFieldBreadth.getText();
String c=mItemDetailsTextFieldHeight.getText();
String d=(String)mItemDetailsComboBoxUnit.getSelectedItem();
String e=a+" X "+b+" X "+c+" "+d ;
String f=mItemDetailsTextFieldQuantity.getText();

String g="";
if(mItemDetailsRadioButtonSingleFace.isSelected())
{
g=" Single Face";
}
else if(mItemDetailsRadioButtonSingleWall.isSelected())
{
g=" Single Wall";
}
else if(mItemDetailsRadioButtonDoubleWall.isSelected())
{
g=" Double Wall";
}
else if(mItemDetailsRadioButtonTripleWall.isSelected())
{
g=" Triple Wall";
}
else{}

String h="";
if(mItemDetailsRadioButtonB.isSelected())
{
h=" B";
}
else if(mItemDetailsRadioButtonC.isSelected())
{
h=" C";
}
else if(mItemDetailsRadioButtonE.isSelected())
{
h=" E";
}
else if(mItemDetailsRadioButtonBC.isSelected())
{
h=" BC";
}
else{}

String i="";
if(mItemDetailsRadioButtonStiching.isSelected())
{
i=" Stiching";
}
else if(mItemDetailsRadioButtonPasting.isSelected())
{
i=" Pasting";
}
else if(mItemDetailsRadioButtonBoth.isSelected())
{
i=" Both";
}
else{}

String j="";
if(mItemDetailsCheckBoxPrinted.isSelected())
{
j=" Yes";
}
else
{
j="No";
}


String k="";
if((mItemDetailsComboBoxSlotted.getSelectedIndex()==0 && mItemDetailsComboBoxTelscope.getSelectedIndex()==0))
{k=(String)mItemDetailsComboBoxFolder.getSelectedItem() ;
}
else if((mItemDetailsComboBoxSlotted.getSelectedIndex()==0 && mItemDetailsComboBoxFolder.getSelectedIndex()==0))
{k=(String)mItemDetailsComboBoxTelscope.getSelectedItem() ;
}
else if((mItemDetailsComboBoxFolder.getSelectedIndex()==0 && mItemDetailsComboBoxTelscope.getSelectedIndex()==0))
{k=(String)mItemDetailsComboBoxSlotted.getSelectedItem() ;
}
else{}

if(mItemDetailsCheckBoxPrinted.isSelected())
{
try					
    {
    Connection con = dao.createconnection();
    PreparedStatement ps2 = con.prepareStatement("insert into design values(?,?,?,?,?,?,?)");
    int p;
DefaultTableModel model6=(DefaultTableModel)jTable1.getModel();
   int x=model6.getRowCount();
   for(p=0;p<x;p++)
   {
   String  face=model6.getValueAt(p,0).toString();
   String filename=model6.getValueAt(p,1).toString();
   String fileloc=model6.getValueAt(p,2).toString();
    String size=model6.getValueAt(p,3).toString();
     String colored=model6.getValueAt(p,4).toString();
        ps2.setString(1,aadhar);
         ps2.setString(2,ide);
        ps2.setString(3,filename);
        ps2.setString(4,fileloc);
        ps2.setString(5,size);
         ps2.setString(6,colored);
        ps2.setString(7,face);
        int flag1=ps2.executeUpdate();
		
		if(flag1>0)
		{
			System.out.println("record inserted.....");
		}
		else
		{
			//System.out.println("record not inserted.....");
		}


   }}					
    catch(Exception e1)
                {
                    System.out.print(e1);
                }
}





// Float ff=Cost.Cost1(a,b,c,d,f,g,h,i,j,k);//shweta

ClientRequirement.abc(k,e,f,g,h,i,j,ide);
Object[] options = {"ADD MORE","OK"};
int n = JOptionPane.showOptionDialog(null,
            "Item Added Successfully",
            "Message",
            JOptionPane.YES_NO_CANCEL_OPTION,
            JOptionPane.DEFAULT_OPTION,
            null,
            options,
            options[1]); 

if(n==0)
{  
mItemDetailsComboBoxSlotted.setSelectedIndex(0);
mItemDetailsComboBoxTelscope.setSelectedIndex(0);
mItemDetailsComboBoxFolder.setSelectedIndex(0);
mItemDetailsComboBoxUnit.setSelectedIndex(0);
mItemDetailsTextFieldQuantity.setText("");
mItemDetailsTextFieldLength.setText("");
mItemDetailsTextFieldBreadth.setText("");
mItemDetailsTextFieldHeight.setText("");
mItemDetailsCheckBoxPrinted.setSelected(false);
buttonGroup1.clearSelection();
buttonGroup2.clearSelection();
buttonGroup3.clearSelection();
pro1=pro1+1;
if(pro1<10)
{
ide="000"+Integer.toString(pro1);
}
else if(pro1<100)
{
ide="00"+Integer.toString(pro1);
}
else if(pro1<1000)
{
ide="000"+Integer.toString(pro1);
}
else
{
ide=Integer.toString(pro1);
}

}
else if(n==1)
{
dispose();
fr1.setEnabled(true);
}
else
{
    fr1.setEnabled(true);
    System.out.println("no option chossen");
} 

    }

}                                                     


    private void mItemDetailsButtonResetActionPerformed(java.awt.event.ActionEvent evt) {                                                        
mItemDetailsComboBoxSlotted.setSelectedIndex(0);
mItemDetailsComboBoxTelscope.setSelectedIndex(0);
mItemDetailsComboBoxFolder.setSelectedIndex(0);
mItemDetailsComboBoxUnit.setSelectedIndex(0);
mItemDetailsTextFieldQuantity.setText("");
mItemDetailsTextFieldLength.setText("");
mItemDetailsTextFieldBreadth.setText("");
mItemDetailsTextFieldHeight.setText("");
mItemDetailsCheckBoxPrinted.setSelected(false);
buttonGroup1.clearSelection();
buttonGroup2.clearSelection();
buttonGroup3.clearSelection();
        // TODO add your handling code here:
    }                                                       

    private void mItemDetailsButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {                                                         
       dispose(); // TODO add your handling code here:
       fr1.setEnabled(true);
    }                                                        

    private void mItemDetailsRadioButtonDoubleWallActionPerformed(java.awt.event.ActionEvent evt) {                                                                  
        // TODO add your handling code here:
    }                                                                 

    private void mItemDetailsRadioButtonTripleWallActionPerformed(java.awt.event.ActionEvent evt) {                                                                  
        // TODO add your handling code here:
    }                                                                 

    private void mItemDetailsTextFieldHeightActionPerformed(java.awt.event.ActionEvent evt) {                                                            
        // TODO add your handling code here:
    }                                                           

    private void mItemDetailsTextFieldBreadthActionPerformed(java.awt.event.ActionEvent evt) {                                                             
        // TODO add your handling code here:
    }                                                            

    private void mItemDetailsTextFieldLengthActionPerformed(java.awt.event.ActionEvent evt) {                                                            
        // TODO add your handling code here:
    }                                                           

    private void mItemDetailsComboBoxTelscopeActionPerformed(java.awt.event.ActionEvent evt) {                                                             

        
         if(mItemDetailsComboBoxTelscope.getSelectedIndex()!=0)
        {
        mItemDetailsComboBoxSlotted.setSelectedIndex(0);
        mItemDetailsComboBoxFolder.setSelectedIndex(0);
        }

        // TODO add your handling code here:
    }                                                            

    private void mItemDetailsComboBoxSlottedActionPerformed(java.awt.event.ActionEvent evt) {                                                            
        if(mItemDetailsComboBoxSlotted.getSelectedIndex()!=0)
        {
        mItemDetailsComboBoxTelscope.setSelectedIndex(0);
        mItemDetailsComboBoxFolder.setSelectedIndex(0);
        }
        // TODO add your handling code here:
    }                                                           

    private void mItemDetailsComboBoxFolderActionPerformed(java.awt.event.ActionEvent evt) {                                                           
         if(mItemDetailsComboBoxFolder.getSelectedIndex()!=0)
        {
        mItemDetailsComboBoxSlotted.setSelectedIndex(0);
        mItemDetailsComboBoxTelscope.setSelectedIndex(0);
        }
        // TODO add your handling code here:
    }                                                          

    private void mItemDetailsCheckBoxLeftActionPerformed(java.awt.event.ActionEvent evt) {                                                         
        // TODO add your handling code here:
    }                                                        

    private void mItemDetailsCheckBoxRightActionPerformed(java.awt.event.ActionEvent evt) {                                                          
        // TODO add your handling code here:
    }                                                         

    private void mItemDetailsCheckBoxFrontActionPerformed(java.awt.event.ActionEvent evt) {                                                          
        // TODO add your handling code here:
    }                                                         

    private void mItemDetailsCheckBoxBackActionPerformed(java.awt.event.ActionEvent evt) {                                                         
        // TODO add your handling code here:
    }                                                        

    private void mItemDetailsCheckBoxTopActionPerformed(java.awt.event.ActionEvent evt) {                                                        
        // TODO add your handling code here:
    }                                                       

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ItemDetails1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ItemDetails1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ItemDetails1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ItemDetails1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ItemDetails1("",new JFrame(),new JFrame()).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton mItemDetailsButtonAdd;
    private javax.swing.JButton mItemDetailsButtonCancel;
    private javax.swing.JButton mItemDetailsButtonReset;
    private javax.swing.JCheckBox mItemDetailsCheckBoxBack;
    private javax.swing.JCheckBox mItemDetailsCheckBoxFront;
    private javax.swing.JCheckBox mItemDetailsCheckBoxLeft;
    private javax.swing.JCheckBox mItemDetailsCheckBoxPrinted;
    private javax.swing.JCheckBox mItemDetailsCheckBoxRight;
    private javax.swing.JCheckBox mItemDetailsCheckBoxTop;
    private javax.swing.JComboBox<String> mItemDetailsComboBoxFolder;
    private javax.swing.JComboBox mItemDetailsComboBoxSlotted;
    private javax.swing.JComboBox<String> mItemDetailsComboBoxTelscope;
    private javax.swing.JComboBox<String> mItemDetailsComboBoxUnit;
    private javax.swing.JRadioButton mItemDetailsRadioButtonB;
    private javax.swing.JRadioButton mItemDetailsRadioButtonBC;
    private javax.swing.JRadioButton mItemDetailsRadioButtonBoth;
    private javax.swing.JRadioButton mItemDetailsRadioButtonC;
    private javax.swing.JRadioButton mItemDetailsRadioButtonDoubleWall;
    private javax.swing.JRadioButton mItemDetailsRadioButtonE;
    private javax.swing.JRadioButton mItemDetailsRadioButtonPasting;
    private javax.swing.JRadioButton mItemDetailsRadioButtonSingleFace;
    private javax.swing.JRadioButton mItemDetailsRadioButtonSingleWall;
    private javax.swing.JRadioButton mItemDetailsRadioButtonStiching;
    private javax.swing.JRadioButton mItemDetailsRadioButtonTripleWall;
    private javax.swing.JTextField mItemDetailsTextFieldBreadth;
    private javax.swing.JTextField mItemDetailsTextFieldHeight;
    private javax.swing.JTextField mItemDetailsTextFieldLength;
    private javax.swing.JTextField mItemDetailsTextFieldQuantity;
    // End of variables declaration                   

}

